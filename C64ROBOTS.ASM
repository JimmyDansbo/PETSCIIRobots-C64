;PETSCII ROBOTS (C64 GFX version)
;by David Murray 2020 (last update 03-28-2022)
;dfwgreencars@gmail.com

!to "c64robots",cbm

*=$0801		;START ADDRESS IS $0801
DESTRUCT_PATH	=$8000	;Destruct path array (256 bytes)
TILE_ATTRIB	=$8100	;Tile attrib array (256 bytes)
TILE_DATA_TL	=$8200	;Tile character top-left (256 bytes)
TILE_DATA_TM	=$8300	;Tile character top-middle (256 bytes)
TILE_DATA_TR	=$8400	;Tile character top-right (256 bytes)
TILE_DATA_ML	=$8500	;Tile character middle-left (256 bytes)
TILE_DATA_MM	=$8600	;Tile character middle-middle (256 bytes)
TILE_DATA_MR	=$8700	;Tile character middle-right (256 bytes)
TILE_DATA_BL	=$8800	;Tile character bottom-left (256 bytes)
TILE_DATA_BM	=$8900	;Tile character bottom-middle (256 bytes)
TILE_DATA_BR	=$8A00	;Tile character bottom-right (256 bytes)
TILE_COLOR_TL	=$8B00	;Tile character top-left (256 bytes) (C64/VIC/TED VERSION ONLY)
TILE_COLOR_TM	=$8C00	;Tile character top-middle (256 bytes) (C64/VIC/TED VERSION ONLY)
TILE_COLOR_TR	=$8D00	;Tile character top-right (256 bytes) (C64/VIC/TED VERSION ONLY)
TILE_COLOR_ML	=$8E00	;Tile character middle-left (256 bytes) (C64/VIC/TED VERSION ONLY)
TILE_COLOR_MM	=$8F00	;Tile character middle-middle (256 bytes) (C64/VIC/TED VERSION ONLY)
TILE_COLOR_MR	=$9000	;Tile character middle-right (256 bytes) (C64/VIC/TED VERSION ONLY)
TILE_COLOR_BL	=$9100	;Tile character bottom-left (256 bytes) (C64/VIC/TED VERSION ONLY)
TILE_COLOR_BM	=$9200	;Tile character bottom-middle (256 bytes) (C64/VIC/TED VERSION ONLY)
TILE_COLOR_BR	=$9300	;Tile character bottom-right (256 bytes) (C64/VIC/TED VERSION ONLY)

;***These arrays can go anywhere in RAM***
UNIT_TIMER_A	=$0600	;Primary timer for units (64 bytes)
UNIT_TIMER_B	=$0640	;Secondary timer for units (64 bytes)
UNIT_TILE	=$0680	;Current tile assigned to unit (32 bytes)
;UNIT_ALT_MOVE	=$06A0	;For moving around objects (32 bytes)
;UNIT_DEST_X	=$06C0	;Destination X coordinate (32 bytes)
;UNIT_DEST_Y	=$06E0	;Destination X coordinate (32 bytes)
EXP_BUFFER	=$0700	;Explosion Buffer (16 bytes)
MAP_PRECALC	=$0710	;Stores pre-calculated objects for map window (77 bytes)

;The following addresses are used to store the current 
;state of the SNES buttons.
SNES_B		=$075D
SNES_Y		=$075E
SNES_SELECT	=$075F
SNES_START	=$0760
SNES_UP		=$0761
SNES_DOWN	=$0762
SNES_LEFT	=$0763
SNES_RIGHT	=$0764
SNES_A		=$0765
SNES_X		=$0766
SNES_BACK_L	=$0767
SNES_BACK_R	=$0768
;The following addresses are used to store the last
;state of the SNES buttons so that we can determine
;if a button was released.
LAST_B		=$0769
LAST_Y		=$076A
LAST_SELECT	=$076B
LAST_START	=$076C
LAST_UP		=$076D
LAST_DOWN	=$076E
LAST_LEFT	=$076F
LAST_RIGHT	=$0770
LAST_A		=$0771
LAST_X		=$0772
LAST_BACK_L	=$0773
LAST_BACK_R	=$0774

;The following addresses are used to store new
;presses of the SNES buttons.  Once they are set
;as a 1, it requires the game to reset them to
;0 when it is ready to be read again.
NEW_B		=$0775
NEW_Y		=$0776
NEW_SELECT	=$0777
NEW_START	=$0778
NEW_UP		=$0779
NEW_DOWN	=$077A
NEW_LEFT	=$077B
NEW_RIGHT	=$077C
NEW_A		=$077D
NEW_X		=$077E
NEW_BACK_L	=$077F
NEW_BACK_R	=$0780

;The following are the locations where the current
;key controls are stored.  These must be set before
;the game can start.
KEY_MOVE_UP		=$0781
KEY_MOVE_DOWN		=$0782
KEY_MOVE_LEFT		=$0783
KEY_MOVE_RIGHT		=$0784
KEY_FIRE_UP		=$0785
KEY_FIRE_DOWN		=$0786
KEY_FIRE_LEFT		=$0787
KEY_FIRE_RIGHT		=$0788
KEY_CYCLE_WEAPONS	=$0789
KEY_CYCLE_ITEMS		=$078A
KEY_USE			=$078B
KEY_SEARCH		=$078C
KEY_MOVE		=$078D

PLAYER_DIRECTION	=$078E	;0=up 6=down 12=left 18=right
MUSIC_STATE		=$078F	;0=music off.

;***MAP FILES CONSIST OF EVERYTHING FROM THIS POINT ON***
UNIT_TYPE	=$5D00	;Unit type 0=none (64 bytes)	
UNIT_LOC_X	=$5D40	;Unit X location (64 bytes)
UNIT_LOC_Y	=$5D80	;Unit X location (64 bytes)
UNIT_A		=$5DC0	
UNIT_B		=$5E00
UNIT_C		=$5E40
UNIT_D		=$5E80
UNIT_HEALTH	=$5EC0	;Unit health (0 to 11) (64 bytes)
MAP		=$6000	;Location of MAP (8K)
;***END OF MAP FILE***

;*** Zero Page locations used ***
TILE		=$23	;The tile number to be plotted
TEMP_X		=$24	;Temporarily used for loops
TEMP_Y		=$25	;Temporarily used for loops
MAP_X		=$26	;Current X location on map
MAP_Y		=$27	;Current Y location on map
MAP_WINDOW_X	=$28	;Top left location of what is displayed in map window
MAP_WINDOW_Y	=$29	;Top left location of what is displayed in map window
DECNUM		=$2A	;a decimal number to be displayed onscreen as 3 digits.
ATTRIB		=$2B	;Tile attribute value
UNIT		=$2C	;Current unit being processed
TEMP_A		=$2D	;used within some routines
TEMP_B		=$2E	;used within some routines
TEMP_C		=$2F	;used within some routines
TEMP_D		=$30	;used within some routines
CURSOR_X	=$31	;For on-screen cursor
CURSOR_Y	=$32	;For on-screen cursor
CURSOR_ON	=$33	;Is cursor active or not? 0=NO.  $90=COMPASS $B9=SEARCH $BA=HAND
REDRAW_WINDOW	=$34	;1=yes 0=no
MOVE_RESULT	=$35	;1=Move request success, 0=fail.
UNIT_FIND	=$36	;255=no unit present.
MOVE_TYPE	=$37	;%00000001=WALK %00000010=HOVER
SCREEN_SHAKE 	=$38	;0=NO 1=YES
PRECALC_COUNT	=$39	;part of screen draw routine
GOAT_ZERO1	=$3E	;used by goat-tracker
GOAT_ZERO2	=$3F	;used by goat-tracker

BASIC:	!BYTE $0B,$08,$01,$00,$9E,$32,$30,$36,$31,$00,$00,$00
	;Adds BASIC line:  1 SYS 2061
	LDA	#%00101000	;Pins 3 & 5 are output
	STA	$DD03	;Data-direction-register for userport
	LDA	#$00	;black
	STA	$D021	;set background
	LDA	#$06	;blue
	STA	$D020	;Set border
	STA	$0001	;DISABLE BASIC ROM
	LDA	#64
	STA	$028A	;set all keys to NON-repeat mode
	LDA	#$80
	STA	$0291	;Disable character set switching
	LDA	#$15
	STA	$D018	;enable upper-case character set
	LDA	#0
	STA	SCREEN_SHAKE
	STA	MUSIC_STATE
	JSR	DISPLAY_LOAD_MESSAGE1
	JSR	TILE_LOAD_ROUTINE
	JSR	LOAD_CHARSET
	JSR	LOAD_MUSIC
	JSR	LOAD_SPRITES
	JSR	SETUP_INTERRUPT
	LDA	#%10010100	;MOVE VIC-II TO $C000-$FFFF REGION
	STA	$DD00		;CIA#2 PORT A
	LDA	#%10001100	;SCREEN RAM AT $E000, CHARSET AT $F000
	STA	$D018		;SAVE TO VIC-II
	JSR	SET_CONTROLS	;copy initial key controls
	JMP	INTRO_SCREEN
INIT_GAME:
	LDA	#0
	STA	SCREEN_SHAKE
	JSR	SETUP_SPRITE
	JSR	RESET_KEYS_AMMO
	JSR	DISPLAY_GAME_SCREEN
	JSR	DISPLAY_LOAD_MESSAGE2
	JSR	MAP_LOAD_ROUTINE
	JSR	SET_DIFF_LEVEL
	JSR	ANIMATE_PLAYER
	JSR	CACULATE_AND_REDRAW
	JSR	DRAW_MAP_WINDOW
	LDA	#06
	STA	PLAYER_DIRECTION
	JSR	DISPLAY_PLAYER_SPRITE
	JSR	DISPLAY_PLAYER_HEALTH
	JSR	DISPLAY_KEYS
	JSR	DISPLAY_WEAPON
	LDA	#15
	STA	$D418	;	volume
	JSR	START_LEVEL_MUSIC
	LDA	#1
	STA	UNIT_TYPE
	JSR	SET_INITIAL_TIMERS
	JSR	PRINT_INTRO_MESSAGE
	LDA	#30
	STA	KEYTIMER
	JMP	MAIN_GAME_LOOP

TILENAME  		!PET"tileset.gfx"
MAPNAME  		!PET"level-a"
FILENAME_CHARSET	!PET"gfxfont.prg"
FILENAME_SPRITES	!PET"sprites.gfx"
FILENAME_MUSIC		!PET"music.c64"
LOADMSG1		!PET 5,"loading tiles...",13
TEXT_LOADCHARSET	!PET"loading charset",13
TEXT_LOADSPRITES	!PET"loading sprites",13
TEXT_LOADMUSIC		!PET"loading music",13
KEYS			!BYTE 	00	;bit0=spade bit2=heart bit3=star
AMMO_PISTOL		!BYTE	00	;how much ammo for the pistol
AMMO_PLASMA		!BYTE	00	;how many shots of the plasmagun
INV_BOMBS		!BYTE	00	;How many bombs do we have
INV_EMP			!BYTE	00	;How many EMPs do we have
INV_MEDKIT		!BYTE	00	;How many medkits do we have?
INV_MAGNET		!BYTE	00	;How many magnets do we have?
SELECTED_WEAPON		!BYTE	00	;0=none 1=pistol 2=plasmagun
SELECTED_ITEM		!BYTE	00	;0=none 1=bomb 2=emp 3=medkit
ANIMATE			!BYTE 	01	;0=DISABLED 1=ENABLED
BIG_EXP_ACT		!BYTE	00	;0=No explosion active 1=big explosion active
MAGNET_ACT		!BYTE	00	;0=no magnet active 1=magnet active
PLASMA_ACT		!BYTE	00	;0=No plasma fire active 1=plasma fire active
RANDOM			!BYTE	00	;used for random number generation
CONTROL			!BYTE	00	;0=keyboard 1=custom keys 2=snes
INTRO_MESSAGE		!SCR"welcome to c64-robots!",255
			!SCR"by david murray 2021",255
			!SCR"map on f7 key",0
MSG_CANTMOVE		!SCR"can't move that!",0
MSG_BLOCKED		!SCR"blocked!",0
MSG_SEARCHING		!SCR"searching",0
MSG_NOTFOUND		!SCR"nothing found here.",0
MSG_FOUNDKEY		!SCR"you found a key card!",0
MSG_FOUNDGUN		!SCR"you found a pistol!",0
MSG_FOUNDEMP		!SCR"you found an emp device!",0
MSG_FOUNDBOMB		!SCR"you found a timebomb!",0
MSG_FOUNDPLAS		!SCR"you found a plasma gun!",0
MSG_FOUNDMED		!SCR"you found a medkit!",0
MSG_FOUNDMAG		!SCR"you found a magnet!",0
MSG_MUCHBET		!SCR"ahhh, much better!",0
MSG_EMPUSED		!SCR"emp activated!",255
			!SCR"nearby robots are rebooting.",0
MSG_TERMINATED		!SCR"you're terminated!",0
MSG_TRANS1		!SCR"transporter will not activate",255
			!SCR"until all robots destroyed.",0
SELECTED_MAP		!BYTE	00
MAP_NAMES		!SCR"01-research lab "
			!SCR"02-headquarters "
			!SCR"03-the village  "
			!SCR"04-the islands  "
			!SCR"05-downtown     "
			!SCR"06-pi university"
			!SCR"07-more islands "
			!SCR"08-robot hotel  "
			!SCR"09-forest moon  "
			!SCR"10-death tower  "
			!SCR"11-bunker       "
			!SCR"12-castle robot "
			!SCR"13-rocket center"
MSG_ELEVATOR		!SCR"[ elevator panel ]  down",255
			!SCR"[  select level  ]  opens",0
MSG_LEVELS		!SCR"[                ]  door",0
MSG_PAUSED		!SCR"game paused.",255
			!SCR"exit game (y/n)",0
MSG_MUSICON		!SCR"music on.",0
MSG_MUSICOFF		!SCR"music off.",0
	
SETUP_INTERRUPT:
	SEI			; Disable interrupt routine
	LDA	#<RUNIRQ	; Setup IRQ to visit my routine RUNIRQ before
	STA	$0314		; doing the usual IRQ routine.
	LDA	#>RUNIRQ
	STA	$0315
	CLI			; Reenable routine.
	RTS

;This is the routine that runs every 60 seconds from the IRQ.
;BGTIMER1 is always set to 1 every cycle, after which the main
;program will reset it to 0 when it is done with it's work for
;that cycle.  BGTIMER2 is a count-down to zero and then stays
;there.
RUNIRQ:	LDA	MUSIC_STATE
	CMP	#0
	BEQ	IRQ0
	JSR	$A003	;music play routine
IRQ0:	JSR	UPDATE_GAME_CLOCK
	JSR	ANIMATE_WATER
	LDA	#1
	STA	BGTIMER1
	LDA	BGTIMER2
	CMP	#0
	BEQ	IRQ1
	DEC	BGTIMER2
IRQ1:	LDA	KEYTIMER
	CMP	#0
	BEQ	IRQ2
	DEC	KEYTIMER
IRQ2:	;BORDER FLASHER
	LDX	BORDER
	CPX	#0
	BEQ	IRQ3
	LDA	BORDER,X
	STA	$D020
	DEC	BORDER
	;BACKGROUND FLASHER
IRQ3:	LDX	BGFLASH
	CPX	#0
	BEQ	IRQ10
	LDA	BGFLASH,X
	STA	$D021
	DEC	BGFLASH
IRQ10:	;SCREEN_SHAKER
	LDA	SCREEN_SHAKE
	CMP	#$00
	BEQ	SHAKE4
SHAKE2:	INC	SSCOUNT
	LDA	SSCOUNT
	CMP	#5
	BNE	SHAKE3
	LDA	#0
	STA	SSCOUNT
SHAKE3:	LDY	SSCOUNT
	LDA	$D016
	AND	#%11111000
	ORA	SSHAKE,Y
	STA	$D016
	JMP	IRQ20
SHAKE4:	LDA	#%11001000
	STA	$D016
	;CHECK TO SEE IF KEYBOARD WAS DISABLED	
	;This routine causes the kernal to skip keyboard
	;input for one cycle to help "debounce" the 
	;keyboard.
IRQ20:	LDA	$0289	;1=normal 0=disabled
	CMP	#0
	BNE	IRQ30
	LDA	KEYSOFF
	CMP	#00
	BEQ	IRQ21
	LDA	#0
	STA	KEYSOFF
	LDA	#1
	STA	$0289	;turn keyboard back on
	JMP	IRQ30:
IRQ21:	INC	KEYSOFF
IRQ30:	;Animate Sprite Color
	DEC	SPRITECOLTIMER
	LDA	SPRITECOLTIMER
	CMP	#0
	BNE	IRQ32
	LDA	#7
	STA	SPRITECOLTIMER
	LDY	SPRITECOLSTATE
	LDA	SPRITECOLCHART,Y
	STA	$D027	;SPRITE 0 COLOR REGISTER
	;STA	$D028	;SPRITE 1 COLOR REGISTER
	INY
	CPY	#8
	BNE	IRQ31
	LDY	#0
IRQ31:	STY	SPRITECOLSTATE
IRQ32	JMP	$EA31		; Back to usual IRQ routine
BGTIMER1	!BYTE 00
BGTIMER2	!BYTE 00
KEYTIMER	!BYTE 00
KEYSOFF		!BYTE 00	
BORDER		!BYTE 00,06,02,08,08,07,07,07,08,08,02
BGFLASH		!BYTE 00,00,06,14,14,01,01,01,14,14,06
SPRITECOLCHART	!BYTE 00,11,12,15,1,15,12,11
SPRITECOLSTATE	!BYTE 00
SPRITECOLTIMER	!BYTE 8
SSHAKE		!BYTE 00,02,04,02,00
SSCOUNT		!BYTE 00

;Since the PET OR VIC-20 has no real-time clock, and the Jiffy clock
;is a pain to read from assembly language, I have created my own.
;This could be updated in future to use the 6510's real-time clock
;for C64.
UPDATE_GAME_CLOCK:
	LDA	CLOCK_ACTIVE
	CMP	#1
	BNE	UGC5
	INC	CYCLES
	LDA	CYCLES
	CMP	#60	;60 for ntsc or 50 for pal
	BNE	UGC5
	LDA	#0
	STA	CYCLES
	INC	SECONDS
	LDA	SECONDS
	CMP	#60	
	BNE	UGC5
	LDA	#0
	STA	SECONDS
	INC	MINUTES
	LDA	MINUTES
	CMP	#60	
	BNE	UGC5
	LDA	#0
	STA	SECONDS
	STA	MINUTES
	INC	HOURS
UGC5:	RTS

HOURS		!BYTE	00
MINUTES		!BYTE	00
SECONDS		!BYTE	00
CYCLES		!BYTE	00
CLOCK_ACTIVE	!BYTE	00

SNES_CONTROLER_READ:
	;First copy last time's results to the LAST variables.
	LDY	#0
SNCL:	LDA	SNES_B,Y
	STA	LAST_B,Y
	;STA	$8398,Y		;TESTCODE
	INY
	CPY	#12
	BNE	SNCL
	;now latch data
	LDA	#%00100000	;latch on pin 5
	STA	$DD01	
	LDA	#%00000000
	STA	$DD01	
	LDX	#0
	;Now read in bits
SRLOOP:	LDA	$DD01
	AND	#%01000000	;READ pin 6
	CMP	#%01000000
	BEQ	SRL1
	LDA	#1
	JMP	SRL5
SRL1:	LDA	#0
SRL5:	STA	SNES_B,X
	;pulse the clock line
	LDA	#%00001000	;CLOCK on pin 3
	STA	$DD01
	LDA	#%00000000
	STA	$DD01
	INX
	CPX	#12
	BNE	SRLOOP
	;now process any new presses
	LDY	#0
SRL09:	LDA	NEW_B,Y
	CMP	#1
	BEQ	SRL10
	LDA	SNES_B,Y
	CMP	#1
	BNE	SRL10
	LDA	LAST_B,Y
	CMP	#0
	BNE	SRL10
	LDA	#1
	STA	NEW_B,Y
SRL10:	INY
	CPY	#12
	BNE	SRL09
	RTS

;This routine clears any new-button-presses
;that are pending.
CLEAR_SNES_PAD:
	LDA	#0
	STA	NEW_UP
	STA	NEW_DOWN
	STA	NEW_LEFT
	STA	NEW_RIGHT
	STA	NEW_A
	STA	NEW_B
	STA	NEW_X
	STA	NEW_Y
	STA	NEW_BACK_L
	STA	NEW_BACK_R
	RTS

;This routine spaces out the timers so that not everything
;is running out once. It also starts the game_clock. 
SET_INITIAL_TIMERS:
	LDA	#1
	STA	CLOCK_ACTIVE
	LDX	#01
SIT1	TXA
	STA	UNIT_TIMER_A,X
	LDA	#0
	STA	UNIT_TIMER_B,X
	INX	
	CPX	#48
	BNE	SIT1
	RTS

DISPLAY_PLAYER_SPRITE:
	LDA	UNIT_TILE
	CMP	#111	;Dead player
	BEQ	DSPR2
	CMP	#97
	BNE	DSPR0
	LDA	#3
	JMP	DSPR1
DSPR0:	LDA	#0
DSPR1:	STA	TEMP_A
	LDA	$D015
	ORA	#%11100000	;turn on sprites 5,6,7
	STA	$D015
	LDA 	#$9E
	CLC
	ADC	PLAYER_DIRECTION
	ADC	TEMP_A	
	STA	$E3FD	;SPRITE POINTER	sprite #5
	LDA 	#$9F	
	CLC
	ADC	PLAYER_DIRECTION
	ADC	TEMP_A	
	STA	$E3FE	;SPRITE POINTER	sprite #6
	LDA 	#$A0
	CLC
	ADC	PLAYER_DIRECTION
	ADC	TEMP_A		
	STA	$E3FF	;SPRITE POINTER	sprite #7
	RTS
DSPR2:	;display dead player
	LDA	$D015
	ORA	#%11100000	;turn on sprites 5,6,7
	STA	$D015
	LDA	#$B6
	STA	$E3FD	;SPRITE POINTER	sprite #5
	LDA	#$B7
	STA	$E3FE	;SPRITE POINTER	sprite #6
	LDA	#$B8
	STA	$E3FF	;SPRITE POINTER	sprite #7
	LDA	#02	;red
	STA	$D02C	;SPRITE COLOR 5
	LDA	#10	;orange
	STA	$D02D	;SPRITE COLOR 6
	LDA	#15	;light gray
	STA	$D02E	;SPRITE COLOR 7
	RTS

MAIN_GAME_LOOP:
	JSR	BACKGROUND_TASKS
	LDA	UNIT_TYPE
	CMP	#1	;Is player unit alive
	BEQ	MG00
	JMP	GAME_OVER
MG00:	LDA	CONTROL
	CMP	#2
	BNE	KY01
	JMP	SC01
KY01:	;Keyboard controls here.
	JSR	KEY_REPEAT
	JSR	$F142
	CMP	#$00
	BEQ	MAIN_GAME_LOOP
MG01:	CMP	#$1D	;CURSOR RIGHT
	BNE	MG02
MG01A:	LDA	#18
	STA	PLAYER_DIRECTION
	LDA	#0
	STA	UNIT
	LDA	#%00000001
	STA	MOVE_TYPE
	JSR	REQUEST_WALK_RIGHT
	JMP	AFTER_MOVE
MG02:	CMP	#$9D	;CURSOR LEFT
	BNE	MG03
MG02A:	LDA	#12
	STA	PLAYER_DIRECTION
	LDA	#0
	STA	UNIT
	LDA	#%00000001
	STA	MOVE_TYPE
	JSR	REQUEST_WALK_LEFT
	JMP	AFTER_MOVE
MG03:	CMP	#$11	;CURSOR DOWN
	BNE	MG04
MG03A:	LDA	#6
	STA	PLAYER_DIRECTION
	LDA	#0
	STA	UNIT
	LDA	#%00000001
	STA	MOVE_TYPE
	JSR	REQUEST_WALK_DOWN
	JMP	AFTER_MOVE
MG04:	CMP	#$91	;CURSOR UP
	BNE	MG05
MG04A:	LDA	#0
	STA	PLAYER_DIRECTION
	LDA	#0
	STA	UNIT
	LDA	#%00000001
	STA	MOVE_TYPE
	JSR	REQUEST_WALK_UP
	JMP	AFTER_MOVE
MG05:	CMP	KEY_CYCLE_WEAPONS
	BNE	MG06
	JSR	CYCLE_WEAPON
	JSR	CLEAR_KEY_BUFFER
	JMP	MAIN_GAME_LOOP
MG06:	CMP	KEY_CYCLE_ITEMS
	BNE	MG07
	JSR	CYCLE_ITEM
	JSR	CLEAR_KEY_BUFFER
	JMP	MAIN_GAME_LOOP
MG07:	CMP	KEY_MOVE
	BNE	MG08
	JSR	MOVE_OBJECT
	JSR	CLEAR_KEY_BUFFER
	JMP	MAIN_GAME_LOOP	
MG08:	CMP	KEY_SEARCH
	BNE	MG09
	JSR	SEARCH_OBJECT
	JSR	CLEAR_KEY_BUFFER
	JMP	MAIN_GAME_LOOP
MG09:	CMP	KEY_USE
	BNE	MG10
	JSR	USE_ITEM
	JSR	CLEAR_KEY_BUFFER
	JMP	MAIN_GAME_LOOP
MG10:	CMP	KEY_MOVE_LEFT
	BNE	MG11
	JMP	MG02A	
MG11:	CMP	KEY_MOVE_DOWN
	BNE	MG12
	JMP	MG03A
MG12:	CMP	KEY_MOVE_RIGHT
	BNE	MG13
	JMP	MG01A
MG13:	CMP	KEY_MOVE_UP
	BNE	MG14
	JMP	MG04A
MG14:	CMP	KEY_FIRE_UP
	BNE	MG15
	JSR	FIRE_UP
	LDA	#20
	STA	KEYTIMER
	JMP	MAIN_GAME_LOOP
MG15:	CMP	KEY_FIRE_LEFT
	BNE	MG16
	JSR	FIRE_LEFT
	LDA	#20
	STA	KEYTIMER
	JMP	MAIN_GAME_LOOP
MG16:	CMP	KEY_FIRE_DOWN
	BNE	MG17
	JSR	FIRE_DOWN
	LDA	#20
	STA	KEYTIMER
	JMP	MAIN_GAME_LOOP
MG17:	CMP	KEY_FIRE_RIGHT
	BNE	MG18
	JSR	FIRE_RIGHT
	LDA	#20
	STA	KEYTIMER
	JMP	MAIN_GAME_LOOP
MG18:	CMP	#03	;RUN/STOP
	BNE	MG19
	JMP	PAUSE_GAME
MG19:	CMP	#223	;C= + * (cheat mode)
	BNE	MG20
	JSR	CHEATER
	JMP	MAIN_GAME_LOOP
MG20:	CMP	#205	;SHIFT-M
	BNE	MG21
	JSR	TOGGLE_MUSIC
	JSR	CLEAR_KEY_BUFFER
	JMP	MAIN_GAME_LOOP
MG21:	CMP	#136	;F7
	BNE	MG22
	JSR	DISPLAY_MAP
MG22:	JMP	MAIN_GAME_LOOP

SC01:	;SNES CONTROLLER starts here
	JSR	SNES_CONTROLER_READ
	;check keytimer for repeat time.
	LDA	KEYTIMER
	CMP	#0
	BEQ	SC02
	JMP	SC40
SC02:	LDA	#0
	STA	NEW_UP
	STA	NEW_DOWN
	STA	NEW_LEFT
	STA	NEW_RIGHT
	STA	SNES_UP
	STA	SNES_DOWN
	STA	SNES_LEFT
	STA	SNES_RIGHT
	JSR	SNES_CONTROLER_READ
SC05:	;first we start with the 4 directional buttons.
	LDA	NEW_LEFT
	CMP	#01
	BNE	SC10
	LDA	SNES_SELECT	;find out if select is being held down
	CMP	#0
	BEQ	SC06
	LDA	#0
	STA	NEW_LEFT
	JSR	DISPLAY_MAP
	JMP	MAIN_GAME_LOOP
SC06:	LDA	#12
	STA	PLAYER_DIRECTION
	LDA	#0
	STA	UNIT
	LDA	#%00000001
	STA	MOVE_TYPE
	JSR	REQUEST_WALK_LEFT
	JMP	AFTER_MOVE_SNES	
SC10:	LDA	NEW_RIGHT
	CMP	#01
	BNE	SC20
	LDA	#18
	STA	PLAYER_DIRECTION
	LDA	#0
	STA	UNIT
	LDA	#%00000001
	STA	MOVE_TYPE
	JSR	REQUEST_WALK_RIGHT
	JMP	AFTER_MOVE_SNES
SC20:	LDA	NEW_UP
	CMP	#01
	BNE	SC30
	LDA	#0
	STA	PLAYER_DIRECTION
	LDA	#0
	STA	UNIT
	LDA	#%00000001
	STA	MOVE_TYPE
	JSR	REQUEST_WALK_UP
	JMP	AFTER_MOVE_SNES
SC30:	LDA	NEW_DOWN
	CMP	#01
	BNE	SC35
	LDA	#6
	STA	PLAYER_DIRECTION
	LDA	#0
	STA	UNIT
	LDA	#%00000001
	STA	MOVE_TYPE
	JSR	REQUEST_WALK_DOWN
	JMP	AFTER_MOVE_SNES
SC35:	LDA	#0
	STA	KEY_FAST
SC40:	;Now check for non-repeating buttons
	LDA	NEW_Y
	CMP	#1
	BNE	SC45
	JSR	FIRE_LEFT
	LDA	#0
	STA	NEW_Y
SC45:	LDA	NEW_A
	CMP	#1
	BNE	SC50
	JSR	FIRE_RIGHT
	LDA	#0
	STA	NEW_A
SC50:	LDA	NEW_X
	CMP	#1
	BNE	SC55
	JSR	FIRE_UP
	LDA	#0
	STA	NEW_X
SC55:	LDA	NEW_B
	CMP	#1
	BNE	SC60
	JSR	FIRE_DOWN
	LDA	#0
	STA	NEW_B
SC60:	LDA	NEW_BACK_L
	CMP	#1
	BNE	SC65
	LDA	SNES_SELECT
	CMP	#1
	BNE	SC62
	JSR	CYCLE_ITEM
	JMP	SC63
SC62:	JSR	SEARCH_OBJECT
SC63:	LDA	#0
	STA	NEW_BACK_L
	LDA	#15
	STA	KEYTIMER
SC65:	LDA	NEW_BACK_R
	CMP	#1
	BNE	SC70
	LDA	SNES_SELECT
	CMP	#1
	BNE	SC67
	JSR	CYCLE_WEAPON
	JMP	SC68
SC67:	JSR	MOVE_OBJECT
SC68:	LDA	#0
	STA	NEW_BACK_R
	LDA	#15
	STA	KEYTIMER
SC70:	LDA	NEW_START
	CMP	#1
	BNE	SC75
	JSR	USE_ITEM
	LDA	#0
	STA	NEW_START
	LDA	#15
	STA	KEYTIMER
SC75:	;STILL USE KEYBOARD TO CHECK FOR RUN/STOP AND MAP MODE
	JSR	$F142
	CMP	#03	;RUN/STOP
	BNE	SC82
	JMP	PAUSE_GAME
	JMP	MAIN_GAME_LOOP
SC82:	CMP	#205	;SHIFT-M
	BNE	SC83
	JSR	TOGGLE_MUSIC
	JSR	CLEAR_KEY_BUFFER
	JMP	MAIN_GAME_LOOP
SC83:	CMP	#136	;F7
	BNE	SC84
	JSR	DISPLAY_MAP
SC84:	JMP	MAIN_GAME_LOOP


;This routine handles things that are in common to
;all 4 directions of movement.
AFTER_MOVE_SNES:
	LDA	MOVE_RESULT
	CMP	#1
	BNE	AMS01
	JSR	ANIMATE_PLAYER
	JSR	CACULATE_AND_REDRAW
	JSR	DISPLAY_PLAYER_SPRITE
AMS01:	LDA	KEY_FAST
	CMP	#0
	BNE	AMS02
	LDA	#15
	STA	KEYTIMER
	LDA	#1
	STA	KEY_FAST
	JMP	AMS03
AMS02:	LDA	#6
	STA	KEYTIMER
	LDA	#0
	STA	NEW_UP
	STA	NEW_DOWN
	STA	NEW_LEFT
	STA	NEW_RIGHT
AMS03:	JMP	MAIN_GAME_LOOP

;TEMP ROUTINE TO GIVE ME ALL ITEMS AND WEAPONS
CHEATER:
	LDA	#7
	STA	KEYS			
	LDA	#100
	STA	AMMO_PISTOL	
	STA	AMMO_PLASMA	
	STA	INV_BOMBS	
	STA	INV_EMP		
	STA	INV_MEDKIT	
	STA	INV_MAGNET	
	LDA	#1	
	STA	SELECTED_WEAPON		
	STA	SELECTED_ITEM	
	JSR	DISPLAY_KEYS
	JSR	DISPLAY_WEAPON
	JSR	DISPLAY_ITEM	
	RTS

PAUSE_GAME:
	LDA	#15		;menu beep
	JSR	PLAY_SOUND	;SOUND PLAY
	;pause clock
	LDA	#0
	STA	CLOCK_ACTIVE
	;display message to user
	JSR	SCROLL_INFO
	LDA	#<MSG_PAUSED
	STA	$FB
	LDA	#>MSG_PAUSED
	STA	$FC
	JSR	PRINT_INFO
	JSR	CLEAR_KEY_BUFFER
PG1:	JSR	$F142
	CMP	#$00
	BEQ	PG1
	CMP	#03	;RUN/STOP
	BEQ	PG5
	CMP	#78	;N-KEY
	BEQ	PG5	
	CMP	#89	;Y-KEY
	BEQ	PG6
	JMP	PG1
PG5:	LDA	#15		;menu beep
	JSR	PLAY_SOUND	;SOUND PLAY
	JSR	SCROLL_INFO
	JSR	SCROLL_INFO
	JSR	SCROLL_INFO
	JSR	CLEAR_KEY_BUFFER
	LDA	#1
	STA	CLOCK_ACTIVE
	JMP	MAIN_GAME_LOOP
PG6:	LDA	#0
	STA	UNIT_TYPE	;make player dead
	JMP	GOM4

CLEAR_KEY_BUFFER:
	LDA	#0
	STA	$0289	;disable keyboard input
	LDA	#0
	STA	$00C6	;CLEAR KEYBOARD BUFFER
	LDA	#20
	STA	KEYTIMER
	RTS

USE_ITEM:
	;First figure out which item to use.
	LDA	SELECTED_ITEM
	CMP	#1	;BOMB
	BNE	UI02
	JMP	USE_BOMB
UI02:	CMP	#2	;EMP
	BNE	UI03	
	JMP	USE_EMP
UI03:	CMP	#3	;MEDKIT
	BNE	UI04
	JMP	USE_MEDKIT
UI04:	CMP	#4	;MAGNET
	BNE	UI05
	JMP	USE_MAGNET
UI05:	RTS

USE_BOMB:
	LDA	#$90	;COMPASS
	STA	CURSOR_ON
	JSR	USER_SELECT_OBJECT
	;NOW TEST TO SEE IF THAT SPOT IS OPEN
	JSR	BOMB_MAGNET_COMMON1
	BEQ	BM30	
	JMP	BM3A				;If not, then exit routine.
BM30:	;Now scan for any units at that location:
	JSR	CHECK_FOR_UNIT
	LDA	UNIT_FIND
	CMP	#255			;255 means no unit found.
	BEQ	BM31
BM3A:	JMP	BOMB_MAGNET_COMMON2
BM31:	LDX	#28	;Start of weapons units
BOMB1:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	BOMB2
	INX
	CPX	#32
	BNE	BOMB1
	RTS	;no slots available right now, abort.
BOMB2:	LDA	#6	;bomb AI
	STA	UNIT_TYPE,X
	LDA	#130	;bomb tile
	STA	UNIT_TILE,X
	LDA	MAP_X
	STA	UNIT_LOC_X,X
	LDA	MAP_Y
	STA	UNIT_LOC_Y,X
	LDA	#100		;How long until exposion?
	STA	UNIT_TIMER_A,X
	LDA	#0
	STA	UNIT_A,X
	DEC	INV_BOMBS
	JSR	DISPLAY_ITEM
	LDA	#01
	STA	REDRAW_WINDOW
	LDA	#6		;move sound
	JSR	PLAY_SOUND	;SOUND PLAY
	RTS

USE_MAGNET:
	LDA	MAGNET_ACT	;only one magnet active at a time.
	CMP	#0
	BEQ	MG32
	RTS
MG32:	LDA	#$90	;COMPASS
	STA	CURSOR_ON
	JSR	USER_SELECT_OBJECT
	;NOW TEST TO SEE IF THAT SPOT IS OPEN
	JSR	BOMB_MAGNET_COMMON1
	BEQ	MG31	
	JMP	BOMB_MAGNET_COMMON2
MG31:	LDX	#28	;Start of weapons units
MAG1:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	MAG2
	INX
	CPX	#32
	BNE	MAG1
	RTS	;no slots available right now, abort.
MAG2:	LDA	#20	;MAGNET AI
	STA	UNIT_TYPE,X
	LDA	#134	;MAGNET tile
	STA	UNIT_TILE,X
	LDA	MAP_X
	STA	UNIT_LOC_X,X
	LDA	MAP_Y
	STA	UNIT_LOC_Y,X
	LDA	#1		;How long until ACTIVATION
	STA	UNIT_TIMER_A,X
	LDA	#255		;how long does it live -A
	STA	UNIT_TIMER_B,X
	LDA	#5		;how long does it live -B
	STA	UNIT_A,X
	LDA	#1
	STA	MAGNET_ACT	;only one magnet allowed at a time.
	DEC	INV_MAGNET
	JSR	DISPLAY_ITEM
	LDA	#01
	STA	REDRAW_WINDOW
	LDA	#6		;move sound
	JSR	PLAY_SOUND	;SOUND PLAY
	RTS

BOMB_MAGNET_COMMON1:
	LDA	#$0
	STA	CURSOR_ON
	JSR	DRAW_MAP_WINDOW		;ERASE THE CURSOR
	LDA	CURSOR_X
	CLC
	ADC	MAP_WINDOW_X
	STA	MAP_X
	STA	MOVTEMP_UX
	LDA	CURSOR_Y
	CLC
	ADC	MAP_WINDOW_Y
	STA	MAP_Y
	STA	MOVTEMP_UY
	JSR	GET_TILE_FROM_MAP
	LDA	TILE
	TAY
	LDA	TILE_ATTRIB,Y
	AND	#%00000001		;is that spot available	
	CMP	#%00000001		;for something to move onto it?
	RTS

BOMB_MAGNET_COMMON2:
	LDA	#<MSG_BLOCKED
	STA	$FB
	LDA	#>MSG_BLOCKED
	STA	$FC
	JSR	PRINT_INFO
	LDA	#11		;ERROR SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	RTS	

USE_EMP:
	LDA	#10
	STA	BGFLASH	
	LDA	#3		;EMP sound
	JSR	PLAY_SOUND	;SOUND PLAY	
	DEC	INV_EMP
	JSR	DISPLAY_ITEM
	LDX	#1	;start with unit#1 (skip player)
EMP1:	;CHECK THAT UNIT EXISTS
	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	EMP5
	;CHECK HORIZONTAL POSITION
	LDA	UNIT_LOC_X,X
	CMP	MAP_WINDOW_X
	BCC	EMP5
	LDA	MAP_WINDOW_X
	CLC
	ADC	#10
	CMP	UNIT_LOC_X,X
	BCC	EMP5
	;NOW CHECK VERTICAL
	LDA	UNIT_LOC_Y,X
	CMP	MAP_WINDOW_Y
	BCC	EMP5
	LDA	MAP_WINDOW_Y
	CLC
	ADC	#6
	CMP	UNIT_LOC_Y,X
	BCC	EMP5
	LDA	#255
	STA	UNIT_TIMER_A,X
	;test to see if unit is above water
	LDA	UNIT_LOC_X,X
	STA	MAP_X
	LDA	UNIT_LOC_Y,X
	STA	MAP_Y
	JSR	GET_TILE_FROM_MAP
	LDA	TILE
	CMP	#204	;WATER
	BNE	EMP5
	LDA	#5
	STA	UNIT_TYPE,X
	STA	UNIT_TIMER_A,X
	LDA	#60
	STA	UNIT_A,X
	LDA	#140	;Electrocuting tile
	STA	UNIT_TILE,X
EMP5:	INX	
	CPX	#28
	BNE	EMP1
	LDA	#<MSG_EMPUSED
	STA	$FB
	LDA	#>MSG_EMPUSED
	STA	$FC
	JSR	PRINT_INFO
	RTS

USE_MEDKIT:
	LDA	UNIT_HEALTH
	CMP	#12	;Do we even need the medkit?
	BNE	UMK1
	RTS
UMK1:	;Now figure out how many HP we need to be healthy.
	LDA	#12
	SEC
	SBC	UNIT_HEALTH
	STA	TEMP_A		;how many we need.
	LDA	INV_MEDKIT	;how many do we have?
	SEC
	SBC	TEMP_A
	BCC	UMK2
	;we had more than we need, so go to full health.
	LDA	#12
	STA	UNIT_HEALTH
	LDA	INV_MEDKIT
	SEC
	SBC	TEMP_A
	STA	INV_MEDKIT
	JMP	UMK3
UMK2:	;we had less than we need, so we'll use what is available.
	LDA	INV_MEDKIT
	CLC
	ADC	UNIT_HEALTH
	STA	UNIT_HEALTH
	LDA	#0
	STA	INV_MEDKIT
UMK3:	JSR	DISPLAY_PLAYER_HEALTH
	JSR	DISPLAY_ITEM
	LDA	#2		;MEDKIT SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	LDA	#<MSG_MUCHBET
	STA	$FB
	LDA	#>MSG_MUCHBET
	STA	$FC
	JSR	PRINT_INFO
	RTS

FIRE_UP:
	LDA	#0
	STA	PLAYER_DIRECTION
	JSR	DISPLAY_PLAYER_SPRITE
	LDA	SELECTED_WEAPON
	CMP	#0
	BNE	FRU0
	RTS
FRU0:	CMP	#1
	BNE	FRU1
	JMP	FIRE_UP_PISTOL
FRU1:	JMP	FIRE_UP_PLASMA

FIRE_UP_PISTOL:
	LDA	AMMO_PISTOL
	CMP	#0
	BNE	FU00
	RTS
FU00:	LDX	#28
FU01:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	FU02
	INX
	CPX	#32	;max unit for weaponsfire
	BNE	FU01
	RTS
FU02:	LDA	#12	;Fire pistol up AI routine
	STA	UNIT_TYPE,X
	LDA	#244	;tile for vertical weapons fire
	STA	UNIT_TILE,X
	LDA	#3		;travel distance.
	STA	UNIT_A,X
	LDA	#0		;weapon-type = pistol
	STA	UNIT_B,X
	JMP	AFTER_FIRE	

FIRE_UP_PLASMA:
	LDA	BIG_EXP_ACT
	CMP	#1
	BEQ	FUP3
	LDA	PLASMA_ACT
	CMP	#1
	BEQ	FUP3
	LDA	AMMO_PLASMA
	CMP	#0
	BNE	FUP0
FUP3:	RTS
FUP0:	LDX	#28
FUP1:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	FUP2
	INX
	CPX	#32	;max unit for weaponsfire
	BNE	FUP1
	RTS
FUP2:	LDA	#12	;Fire pistol up AI routine
	STA	UNIT_TYPE,X
	LDA	#240	;tile for vertical plasma bolt
	STA	UNIT_TILE,X
	LDA	#3		;travel distance.
	STA	UNIT_A,X
	LDA	#1		;weapon-type = plasma
	STA	UNIT_B,X
	STA	PLASMA_ACT
	JMP	AFTER_FIRE

FIRE_DOWN:
	LDA	#6
	STA	PLAYER_DIRECTION
	JSR	DISPLAY_PLAYER_SPRITE
	LDA	SELECTED_WEAPON
	CMP	#0
	BNE	FRD0
	RTS
FRD0:	CMP	#1
	BNE	FRD1
	JMP	FIRE_DOWN_PISTOL
FRD1:	JMP	FIRE_DOWN_PLASMA

FIRE_DOWN_PISTOL:
	LDA	AMMO_PISTOL
	CMP	#0
	BNE	FD00
	RTS
FD00:	LDX	#28
FD01:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	FD02
	INX
	CPX	#32	;max unit for weaponsfire
	BNE	FD01
	RTS	
FD02:	LDA	#13	;Fire pistol DOWN AI routine
	STA	UNIT_TYPE,X
	LDA	#244	;tile for vertical weapons fire
	STA	UNIT_TILE,X
	LDA	#3		;travel distance.
	STA	UNIT_A,X
	LDA	#0		;weapon-type = pistol
	STA	UNIT_B,X
	JMP	AFTER_FIRE

FIRE_DOWN_PLASMA:
	LDA	BIG_EXP_ACT
	CMP	#1
	BEQ	FDP3
	LDA	PLASMA_ACT
	CMP	#1
	BEQ	FDP3
	LDA	AMMO_PLASMA
	CMP	#0
	BNE	FDP0
FDP3:	RTS
FDP0:	LDX	#28
FDP1:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	FDP2
	INX
	CPX	#32	;max unit for weaponsfire
	BNE	FDP1
	RTS	
FDP2:	LDA	#13	;Fire pistol DOWN AI routine
	STA	UNIT_TYPE,X
	LDA	#240	;tile for vertical weapons fire
	STA	UNIT_TILE,X
	LDA	#3		;travel distance.
	STA	UNIT_A,X
	LDA	#1		;weapon-type = plasma
	STA	UNIT_B,X
	STA	PLASMA_ACT
	JMP	AFTER_FIRE

FIRE_LEFT:
	LDA	#12
	STA	PLAYER_DIRECTION
	JSR	DISPLAY_PLAYER_SPRITE
	LDA	SELECTED_WEAPON
	CMP	#0
	BNE	FRL0
	RTS
FRL0:	CMP	#1
	BNE	FRL1
	JMP	FIRE_LEFT_PISTOL
FRL1:	JMP	FIRE_LEFT_PLASMA

FIRE_LEFT_PISTOL:
	LDA	AMMO_PISTOL
	CMP	#0
	BNE	FL00
	RTS
FL00:	LDX	#28
FL01:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	FL02
	INX
	CPX	#32	;max unit for weaponsfire
	BNE	FL01
	RTS	
FL02:	LDA	#14	;Fire pistol LEFT AI routine
	STA	UNIT_TYPE,X
	LDA	#245	;tile for horizontal weapons fire
	STA	UNIT_TILE,X
	LDA	#5		;travel distance.
	STA	UNIT_A,X
	LDA	#0		;weapon-type = pistol
	STA	UNIT_B,X
	JMP	AFTER_FIRE

FIRE_LEFT_PLASMA:
	LDA	BIG_EXP_ACT
	CMP	#1
	BEQ	FLP3
	LDA	PLASMA_ACT
	CMP	#1
	BEQ	FLP3
	LDA	AMMO_PLASMA
	CMP	#0
	BNE	FLP0
FLP3:	RTS
FLP0:	LDX	#28
FLP1:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	FLP2
	INX
	CPX	#32	;max unit for weaponsfire
	BNE	FLP1
	RTS	
FLP2:	LDA	#14	;Fire pistol LEFT AI routine
	STA	UNIT_TYPE,X
	LDA	#241	;tile for horizontal weapons fire
	STA	UNIT_TILE,X
	LDA	#5		;travel distance.
	STA	UNIT_A,X
	LDA	#1		;weapon-type = plasma
	STA	UNIT_B,X
	STA	PLASMA_ACT
	JMP	AFTER_FIRE

FIRE_RIGHT:
	LDA	#18
	STA	PLAYER_DIRECTION
	JSR	DISPLAY_PLAYER_SPRITE
	LDA	SELECTED_WEAPON
	CMP	#0
	BNE	FRR0
	RTS
FRR0:	CMP	#1
	BNE	FRR1
	JMP	FIRE_RIGHT_PISTOL
FRR1:	JMP	FIRE_RIGHT_PLASMA
	
FIRE_RIGHT_PISTOL:
	LDA	AMMO_PISTOL
	CMP	#0
	BNE	FR00
	RTS
FR00:	LDX	#28
FR01:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	FR02
	INX
	CPX	#32	;max unit for weaponsfire
	BNE	FR01
	RTS	
FR02:	LDA	#15	;Fire pistol RIGHT AI routine
	STA	UNIT_TYPE,X
	LDA	#245	;tile for horizontal weapons fire
	STA	UNIT_TILE,X
	LDA	#5		;travel distance.
	STA	UNIT_A,X
	LDA	#0		;weapon-type = pistol
	STA	UNIT_B,X
	JMP	AFTER_FIRE

FIRE_RIGHT_PLASMA:
	LDA	BIG_EXP_ACT
	CMP	#1
	BEQ	FRP3
	LDA	PLASMA_ACT
	CMP	#1
	BEQ	FRP3
	LDA	AMMO_PLASMA
	CMP	#0
	BNE	FRP0
FRP3:	RTS
FRP0:	LDX	#28
FRP1:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	FRP2
	INX
	CPX	#32	;max unit for weaponsfire
	BNE	FRP1
	RTS	
FRP2:	LDA	#15	;Fire pistol RIGHT AI routine
	STA	UNIT_TYPE,X
	LDA	#241	;tile for horizontal weapons fire
	STA	UNIT_TILE,X
	LDA	#5		;travel distance.
	STA	UNIT_A,X
	LDA	#1		;weapon-type = plasma
	STA	UNIT_B,X
	STA	PLASMA_ACT
	JMP	AFTER_FIRE

AFTER_FIRE:
	LDA	#0
	STA	UNIT_TIMER_A,X
	LDA	UNIT_LOC_X
	STA	UNIT_LOC_X,X
	LDA	UNIT_LOC_Y
	STA	UNIT_LOC_Y,X
	STX	UNIT
	LDA	SELECTED_WEAPON
	CMP	#2
	BEQ	AF01
	LDA	#09		;PISTOL-SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	DEC	AMMO_PISTOL
	JSR	DISPLAY_WEAPON
	RTS
AF01:	LDA	#08		;PLASMA-GUN-SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	DEC	AMMO_PLASMA
	JSR	DISPLAY_WEAPON
	RTS

KEY_REPEAT:
	LDA	#16
	STA	$028C	;reset kernal repeat timer (to prevent repeats) 
	LDA	KEYTIMER
	CMP	#0
	BNE	KEYR2
	LDA	$C5
	CMP	#64	;no key pressed
	BEQ	KEYR1
	LDA	#64	;clear LSTX register
	STA	$C5	;clear LSTX register
	LDA	#7
	STA	KEYTIMER
	RTS
KEYR1:	;No key pressed, reset all to defaults
	LDA	#0	
	STA	KEY_FAST
	LDA	#7
	STA	KEYTIMER
KEYR2:	RTS

;This routine handles things that are in common to
;all 4 directions of movement.
AFTER_MOVE:
	LDA	MOVE_RESULT
	CMP	#1
	BNE	AM01
	JSR	ANIMATE_PLAYER
	JSR	CACULATE_AND_REDRAW
	JSR	DISPLAY_PLAYER_SPRITE
AM01:	;now reset key-repeat rate
	LDA	KEY_FAST
	CMP	#0
	BNE	KEYR3
	;FIRST REPEAT
	LDA	#15
	STA	KEYTIMER
	INC	KEY_FAST
KEYR4:	JMP	MAIN_GAME_LOOP
KEYR3:	;SUBSEQUENT REPEATS
	LDA	#6
	STA	KEYTIMER
	JMP	MAIN_GAME_LOOP
KEY_FAST	!BYTE	0	;0=DEFAULT STATE

;This routine is invoked when the user presses S to search
;an object such as a crate, chair, or plant.
SEARCH_OBJECT:
	LDA	#$B9	;MAGNIFYING GLASS
	STA	CURSOR_ON
	JSR	USER_SELECT_OBJECT
	JSR	DISPLAY_PLAYER_SPRITE
	LDA	#1
	STA	REDRAW_WINDOW
CHS1:	;first check of object is searchable
	JSR	CALC_COORDINATES
	JSR	GET_TILE_FROM_MAP
	LDX	TILE
	LDA	TILE_ATTRIB,X
	AND	#%01000000	;can search attribute
	CMP	#%01000000
	BEQ	CHS2
	LDA	#$0
	STA	CURSOR_ON
	JMP	CHS3
CHS2:	;is the tile a crate?
	LDX	TILE
	CPX	#041	;BIG CRATE
	BEQ	CHS2B
	CPX	#045	;small CRATE
	BEQ	CHS2B
	CPX	#199	;"Pi" CRATE
	BEQ	CHS2B
	JMP	CHS2C
CHS2B:	LDA	DESTRUCT_PATH,X
	STA	TILE
	JSR	PLOT_TILE_TO_MAP
CHS2C:	;Now check if there is an object there.
	LDA	#0
	STA	SEARCHBAR
	LDA	#<MSG_SEARCHING
	STA	$FB
	LDA	#>MSG_SEARCHING
	STA	$FC
	JSR	PRINT_INFO
SOBJ1:	LDA	#18	;delay time between search periods
	STA	BGTIMER2
SOBJ2:	JSR	BACKGROUND_TASKS
	LDA	BGTIMER2
	CMP	#0
	BNE	SOBJ2
	LDX	SEARCHBAR
	LDA	#46	;PERIOD
	STA	$E3C9,X
	INC	SEARCHBAR
	LDA	SEARCHBAR
	CMP	#8
	BNE	SOBJ1
	LDA	#0
	STA	CURSOR_ON
	JSR	DRAW_MAP_WINDOW		;ERASE THE CURSOR
	JSR	CALC_COORDINATES
	JSR	CHECK_FOR_HIDDEN_UNIT
	LDA	UNIT_FIND
	CMP	#255
	BNE	SOBJ5
CHS3:	LDA	#<MSG_NOTFOUND
	STA	$FB
	LDA	#>MSG_NOTFOUND
	STA	$FC
	JSR	PRINT_INFO
	RTS
SOBJ5:	LDX	UNIT_FIND
	LDA	UNIT_TYPE,X
	STA	TEMP_A		;store object type
	LDA	UNIT_A,X
	STA	TEMP_B		;store secondary info
	LDA	#0	;DELETE ITEM ONCE FOUND
	STA	UNIT_TYPE,X
	;***NOW PROCESS THE ITEM FOUND***
	LDA	#10		;ITEM-FOUND-SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	LDA	TEMP_A
	CMP	#128	;key
	BEQ	SOBJ10
	JMP	SOBJ15
SOBJ10:	LDA	TEMP_B		;WHICH SORT OF KEY?
	CMP	#00
	BNE	SOBJK1
	LDA	KEYS
	ORA	#%00000001	;Add spade key
	STA	KEYS
	JMP	SOBJ12
SOBJK1:	CMP	#01
	BNE	SOBJK2
	LDA	KEYS
	ORA	#%00000010	;Add heart key
	STA	KEYS
	JMP	SOBJ12
SOBJK2:	LDA	KEYS
	ORA	#%00000100	;Add star key
	STA	KEYS
SOBJ12:	LDA	#<MSG_FOUNDKEY
	STA	$FB
	LDA	#>MSG_FOUNDKEY
	STA	$FC
	JSR	PRINT_INFO
	JSR	DISPLAY_KEYS
	RTS
SOBJ15:	CMP	#129	;TIME BOMB
	BNE	SOBJ17
	LDA	TEMP_B
	CLC
	ADC	INV_BOMBS
	STA	INV_BOMBS
	LDA	#<MSG_FOUNDBOMB
	STA	$FB
	LDA	#>MSG_FOUNDBOMB
	STA	$FC
	JSR	PRINT_INFO
	JSR	DISPLAY_ITEM
	RTS	
SOBJ17:	CMP	#130	;EMP	
	BNE	SOBJ20
	LDA	TEMP_B
	CLC
	ADC	INV_EMP
	STA	INV_EMP
	LDA	#<MSG_FOUNDEMP
	STA	$FB
	LDA	#>MSG_FOUNDEMP
	STA	$FC
	JSR	PRINT_INFO
	JSR	DISPLAY_ITEM
	RTS	
SOBJ20:	CMP	#131	;PISTOL
	BNE	SOBJ21
	LDA	TEMP_B
	CLC
	ADC	AMMO_PISTOL
	STA	AMMO_PISTOL
	BCC	SOBJ2A	;If we rolled over past 255
	LDA	#255	;set it to 255.
	STA	AMMO_PISTOL
SOBJ2A:	LDA	#<MSG_FOUNDGUN
	STA	$FB
	LDA	#>MSG_FOUNDGUN
	STA	$FC
	JSR	PRINT_INFO
	JSR	DISPLAY_WEAPON	
SOBJ21:	CMP	#132	;PLASMA GUN
	BNE	SOBJ22
	LDA	TEMP_B
	CLC
	ADC	AMMO_PLASMA
	STA	AMMO_PLASMA
	LDA	#<MSG_FOUNDPLAS
	STA	$FB
	LDA	#>MSG_FOUNDPLAS
	STA	$FC
	JSR	PRINT_INFO
	JSR	DISPLAY_WEAPON
SOBJ22:	CMP	#133	;MEDKIT
	BNE	SOBJ23
	LDA	TEMP_B
	CLC
	ADC	INV_MEDKIT
	STA	INV_MEDKIT
	LDA	#<MSG_FOUNDMED
	STA	$FB
	LDA	#>MSG_FOUNDMED
	STA	$FC
	JSR	PRINT_INFO
	JSR	DISPLAY_ITEM
SOBJ23:	CMP	#134	;MAGNET
	BNE	SOBJ99
	LDA	TEMP_B
	CLC
	ADC	INV_MAGNET
	STA	INV_MAGNET
	LDA	#<MSG_FOUNDMAG
	STA	$FB
	LDA	#>MSG_FOUNDMAG
	STA	$FC
	JSR	PRINT_INFO
	JSR	DISPLAY_ITEM
SOBJ99:	;ADD CODE HERE FOR OTHER OBJECT TYPES
	RTS
SEARCHBAR	!BYTE 00	;to count how many periods to display.

;combines cursor location with window location
;to determine coordinates for MAP_X and MAP_Y
CALC_COORDINATES:
	LDA	CURSOR_X
	CLC
	ADC	MAP_WINDOW_X
	STA	MAP_X
	LDA	CURSOR_Y
	CLC
	ADC	MAP_WINDOW_Y
	STA	MAP_Y
	RTS

;This routine is called by routines such as the move, search,
;or use commands.  It displays a cursor and allows the user
;to pick a direction of an object.
USER_SELECT_OBJECT:
	LDA	#17		;short beep sound
	JSR	PLAY_SOUND	;SOUND PLAY
	LDA	#5
	STA	CURSOR_X
	LDA	#3
	STA	CURSOR_Y
	;LDA	#$90
	;STA	CURSOR_ON
	JSR	DISPLAY_CURSOR
	;First ask user which object to move
MV01:	JSR	BACKGROUND_TASKS
	LDA	UNIT_TYPE
	CMP	#0	;Did player die wile moving something?
	BNE	MVCONT
	LDA	#0
	STA	CURSOR_ON
	RTS
MVCONT:	LDA	CONTROL
	CMP	#2
	BNE	MV01A
	JMP	MVSNES
MV01A:	JSR	$F142
	;CMP	#$00
	;BEQ	MV01
MV02:	CMP	#$1D	;CURSOR RIGHT
	BNE	MV03
MV00R:	INC	CURSOR_X
	LDA	#18
	STA	PLAYER_DIRECTION
	RTS
MV03:	CMP	#$9D	;CURSOR LEFT
	BNE	MV04
MV00L:	DEC	CURSOR_X
	LDA	#12
	STA	PLAYER_DIRECTION
	RTS	
MV04:	CMP	#$11	;CURSOR DOWN
	BNE	MV05
MV00D:	INC	CURSOR_Y
	LDA	#6
	STA	PLAYER_DIRECTION
	RTS
MV05:	CMP	#$91	;CURSOR UP
	BNE	MV06
MV00U:	DEC	CURSOR_Y
	LDA	#0
	STA	PLAYER_DIRECTION
	RTS
MV06:	CMP	KEY_MOVE_LEFT
	BNE	MV07
	JMP	MV00L
MV07:	CMP	KEY_MOVE_DOWN
	BNE	MV08
	JMP	MV00D
MV08:	CMP	KEY_MOVE_RIGHT
	BNE	MV09
	JMP	MV00R
MV09:	CMP	KEY_MOVE_UP
	BNE	MV0A
	JMP	MV00U
MV0A:	JMP	MV01

MVSNES:	;SNES controls for this routine
	JSR	SNES_CONTROLER_READ
	LDA	NEW_RIGHT
	CMP	#1
	BNE	MVS03
	INC	CURSOR_X
	LDA	#0
	STA	NEW_RIGHT
	LDA	#18
	STA	PLAYER_DIRECTION
	RTS
MVS03:	LDA	NEW_LEFT
	CMP	#1
	BNE	MVS04
	DEC	CURSOR_X
	LDA	#0
	STA	NEW_LEFT
	LDA	#12
	STA	PLAYER_DIRECTION
	RTS	
MVS04:	LDA	NEW_DOWN
	CMP	#1
	BNE	MVS05
	INC	CURSOR_Y
	LDA	#0
	STA	NEW_DOWN
	LDA	#6
	STA	PLAYER_DIRECTION
	RTS
MVS05:	LDA	NEW_UP
	CMP	#1
	BNE	MVS06
	DEC	CURSOR_Y
	LDA	#0
	STA	NEW_UP
	LDA	#0
	STA	PLAYER_DIRECTION
	RTS
MVS06:	JMP	MV01

MOVE_OBJECT:
	LDA	#$BA	;HAND
	STA	CURSOR_ON
	JSR	USER_SELECT_OBJECT
	JSR	DISPLAY_PLAYER_SPRITE
	LDA	UNIT
	;now test that object to see if it
	;is allowed to be moved.
MV10:	LDA	#0
	STA	CURSOR_ON
	JSR	DISPLAY_CURSOR
	JSR	CALC_COORDINATES
	JSR	CHECK_FOR_HIDDEN_UNIT
	LDA	UNIT_FIND
	STA	MOVTEMP_U
	JSR	GET_TILE_FROM_MAP
	LDA	TILE
	TAY
	LDA	TILE_ATTRIB,Y
	AND	#%00000100		;can it be moved?	
	CMP	#%00000100		
	BEQ	MV11
	LDA	#<MSG_CANTMOVE
	STA	$FB
	LDA	#>MSG_CANTMOVE
	STA	$FC
	JSR	PRINT_INFO
	LDA	#11		;ERROR SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	RTS
MV11:	LDA	TILE
	STA	MOVTEMP_O	;Store which tile it is we are moving
	LDA	MAP_X
	STA	MOVTEMP_X	;Store original location of object
	LDA	MAP_Y
	STA	MOVTEMP_Y
	LDA	#$BA	;HAND
	STA	CURSOR_ON
	JSR	DISPLAY_CURSOR
	LDA	#17		;beep sound
	JSR	PLAY_SOUND	;SOUND PLAY
	;NOW ASK THE USER WHICH DIRECTION TO MOVE IT TO
MV15:	JSR	BACKGROUND_TASKS
	LDA	UNIT_TYPE
	CMP	#0	;Did player die wile moving something?
	BNE	MVCONT2
	LDA	#0
	STA	CURSOR_ON
	RTS	
MVCONT2:	;which controller are we using?
	LDA	CONTROL
	CMP	#2
	BNE	MV15B
	JMP	SMV30

MV15B:	;keyboard control
	JSR	$F142
	CMP	#$00
	BEQ	MV15
MV16:	CMP	#$1D	;CURSOR RIGHT
	BNE	MV17
	INC	CURSOR_X
	JMP	MV25
MV17:	CMP	#$9D	;CURSOR LEFT
	BNE	MV18
	DEC	CURSOR_X
	JMP	MV25	
MV18:	CMP	#$11	;CURSOR DOWN
	BNE	MV19
	INC	CURSOR_Y
	JMP	MV25
MV19:	CMP	#$91	;CURSOR UP
	BNE	MV20
	DEC	CURSOR_Y
	JMP	MV25
MV20:	CMP	KEY_MOVE_LEFT
	BNE	MV2A
	DEC	CURSOR_X
	JMP	MV25
MV2A:	CMP	KEY_MOVE_DOWN
	BNE	MV2B
	INC	CURSOR_Y
	JMP	MV25
MV2B:	CMP	KEY_MOVE_RIGHT
	BNE	MV2C
	INC	CURSOR_X
	JMP	MV25
MV2C:	CMP	KEY_MOVE_UP
	BNE	MV2D
	DEC	CURSOR_Y
	JMP	MV25
MV2D:	JMP	MV15	

SMV30:	;SNES controls
	JSR	SNES_CONTROLER_READ
	LDA	NEW_RIGHT
	CMP	#1
	BNE	SMV31
	INC	CURSOR_X
	LDA	#0
	STA	NEW_RIGHT
	JMP	MV25
SMV31:	LDA	NEW_LEFT
	CMP	#1
	BNE	SMV32
	DEC	CURSOR_X
	LDA	#0
	STA	NEW_LEFT
	JMP	MV25	
SMV32:	LDA	NEW_DOWN
	CMP	#1
	BNE	SMV33
	INC	CURSOR_Y
	LDA	#0
	STA	NEW_DOWN
	JMP	MV25
SMV33:	LDA	NEW_UP
	CMP	#1
	BNE	SMV34
	DEC	CURSOR_Y
	LDA	#0
	STA	NEW_UP
	JMP	MV25
SMV34:	JMP	MV15

	;NOW TEST TO SEE IF THAT SPOT IS OPEN
MV25:	LDA	#0
	STA	CURSOR_ON
	JSR	DRAW_MAP_WINDOW		;ERASE THE CURSOR
	LDA	CURSOR_X
	CLC
	ADC	MAP_WINDOW_X
	STA	MAP_X
	STA	MOVTEMP_UX
	LDA	CURSOR_Y
	CLC
	ADC	MAP_WINDOW_Y
	STA	MAP_Y
	STA	MOVTEMP_UY
	JSR	GET_TILE_FROM_MAP
	LDA	TILE
	TAY
	LDA	TILE_ATTRIB,Y
	AND	#%00100000		;is that spot available	
	CMP	#%00100000		;for something to move onto it?
	BEQ	MV30	
	JMP	MV3A				;If not, then exit routine.
MV30:	;Now scan for any units at that location:
	JSR	CHECK_FOR_UNIT
	LDA	UNIT_FIND
	CMP	#255			;255 means no unit found.
	BEQ	MV31
MV3A:	LDA	#<MSG_BLOCKED
	STA	$FB
	LDA	#>MSG_BLOCKED
	STA	$FC
	JSR	PRINT_INFO
	LDA	#11		;ERROR SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	RTS
MV31:	LDA	#6		;move sound
	JSR	PLAY_SOUND	;SOUND PLAY
	LDY	#0
	LDA	($FD),Y			;Grab current object
	STA	MOVTEMP_D
	LDA	MOVTEMP_O
	STA	($FD),Y			;replace with obect we are moving	
	LDA	MOVTEMP_X		;RETRIEVE original location of object
	STA	MAP_X
	LDA	MOVTEMP_Y
	STA	MAP_Y
	JSR	GET_TILE_FROM_MAP
	LDA	MOVTEMP_D
	CMP	#148		;trash compactor tile
	BNE	MV31A
	LDA	#09		;Floor tile
MV31A:	STA	($FD),Y			;Replace former location
	LDA	#1
	STA	REDRAW_WINDOW		;See the result
	LDA	MOVTEMP_U
	CMP	#255
	BNE	MV32
	RTS	
MV32:	LDX	MOVTEMP_U
	LDA	MOVTEMP_UX
	STA	UNIT_LOC_X,X
	LDA	MOVTEMP_UY
	STA	UNIT_LOC_Y,X
	RTS
MOVTEMP_O:	!BYTE 00	;origin tile
MOVTEMP_D:	!BYTE 00	;destination tile
MOVTEMP_X:	!BYTE 00	;x-coordinate
MOVTEMP_Y:	!BYTE 00	;y-coordinate
MOVTEMP_U:	!BYTE 00	;unit number (255=none)
MOVTEMP_UX	!BYTE 00
MOVTEMP_UY	!BYTE 00
CACULATE_AND_REDRAW:
	LDA	UNIT_LOC_X	;no index needed since it's player unit
	SEC
	SBC	#5
	STA	MAP_WINDOW_X
	LDA	UNIT_LOC_Y	;no index needed since it's player unit
	SEC
	SBC	#3
	STA	MAP_WINDOW_Y
	LDA	#1
	STA	REDRAW_WINDOW
	RTS

;This routine checks all units from 0 to 31 and figures out if it should be dislpayed
;on screen, and then grabs that unit's tile and stores it in the MAP_PRECALC array
;so that when the window is drawn, it does not have to search for units during the
;draw, speeding up the display routine.
MAP_PRE_CALCULATE:
	;CLEAR OLD BUFFER
	LDA	#0
	LDY	#0
PREC0:	STA	MAP_PRECALC,Y
	INY
	CPY	#77
	BNE	PREC0
	LDX	#1	;In this version, we don't draw the player here.
PREC1:	;CHECK THAT UNIT EXISTS
	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	PREC5
	;CHECK HORIZONTAL POSITION
	LDA	UNIT_LOC_X,X
	CMP	MAP_WINDOW_X
	BCC	PREC5
	LDA	MAP_WINDOW_X
	CLC
	ADC	#10
	CMP	UNIT_LOC_X,X
	BCC	PREC5
	;NOW CHECK VERTICAL
	LDA	UNIT_LOC_Y,X
	CMP	MAP_WINDOW_Y
	BCC	PREC5
	LDA	MAP_WINDOW_Y
	CLC
	ADC	#6
	CMP	UNIT_LOC_Y,X
	BCC	PREC5
	;Unit found in map window, now add that unit's
	;tile to the precalc map.
PREC2:	LDA	UNIT_LOC_Y,X
	SEC
	SBC	MAP_WINDOW_Y
	TAY
	LDA	UNIT_LOC_X,X
	SEC
	SBC	MAP_WINDOW_X
	CLC
	ADC	PRECALC_ROWS,Y	
	TAY
	LDA	UNIT_TILE,X
	CMP	#130	;is it a bomb
	BEQ	PREC6
	CMP	#134	;is it a magnet?
	BEQ	PREC6
PREC4:	STA	MAP_PRECALC,Y
PREC5:	;continue search
	INX	
	CPX	#32
	BNE	PREC1
	RTS
PREC6:	;What to do in case of bomb or magnet that should
	;go underneath the unit or robot.
	LDA	MAP_PRECALC,Y
	CMP	#0
	BNE	PREC5
	LDA	UNIT_TILE,X
	JMP	PREC4		

PRECALC_ROWS:	!BYTE	0,11,22,33,44,55,66

;This routine is where the MAP is displayed on the screen
;This is a temporary routine, taken from the map editor.
DRAW_MAP_WINDOW:
	JSR	MAP_PRE_CALCULATE
	LDA	#0
	STA	REDRAW_WINDOW
	STA	TEMP_X
	STA	TEMP_Y
	STA	PRECALC_COUNT
DM01:	;FIRST CALCULATE WHERE THE BYTE IS STORED IN THE MAP
	LDY	#0
	LDA	TEMP_Y
	CLC
	ADC	MAP_WINDOW_Y	
	ROR
	PHP
	CLC
	ADC	#>MAP
	STA	$FE	;HIGH BYTE OF MAP SOURCE
	LDA	#$0
	PLP
	ROR
	CLC
	ADC	TEMP_X
	ADC	MAP_WINDOW_X
	STA	$FD	;LOW BYTE OF MAP SOURCE
	LDA	($FD),Y
	STA	TILE
	;NOW FIGURE OUT WHERE TO PLACE IT ON SCREEN.
	LDX	TEMP_Y
	LDA	MAP_CHART_L,X
	STA	$FB	;LOW BYTE OF SCREEN AREA
	LDA	MAP_CHART_H,X
	STA	$FC	;HIGH BYTE OF SCREEN AREA
	LDA	TEMP_X
	ASL	;MULTIPLY BY 2
	CLC
	ADC	TEMP_X	;ADD ANOTHER TO MAKE X3
	ADC	$FB
	STA	$FB
	LDA	$FC
	ADC	#00	;CARRY FLAG
	STA	$FC
	JSR	PLOT_TILE
	;now check for sprites in this location
	LDY	PRECALC_COUNT
	LDA	MAP_PRECALC,Y
	CMP	#00
	BEQ	DM02
	STA	TILE
	LDX	TEMP_Y
	LDA	MAP_CHART_L,X
	STA	$FB	;LOW BYTE OF SCREEN AREA
	LDA	MAP_CHART_H,X
	STA	$FC	;HIGH BYTE OF SCREEN AREA
	LDA	TEMP_X
	ASL	;MULTIPLY BY 2
	CLC
	ADC	TEMP_X	;ADD ANOTHER TO MAKE X3
	ADC	$FB
	STA	$FB
	LDA	$FC
	ADC	#00	;CARRY FLAG
	STA	$FC
	JSR	PLOT_TRANSPARENT_TILE
DM02:	INC	TEMP_X
	INC	PRECALC_COUNT
	LDA	TEMP_X
	CMP	#11
	BNE	DM01
DM04:	LDA	#0
	STA	TEMP_X
	INC	TEMP_Y
	LDA	TEMP_Y
	CMP	#7
	BEQ	DM10
	JMP	DM01
DM10:	JSR	DISPLAY_CURSOR
	RTS
	
;This routine plots a 3x3 tile from the tile database anywhere
;on screen.  But first you must define the tile number in the
;TILE variable, as well as the starting screen address must
;be defined in $FB.
PLOT_TILE:
	LDA	$FB	;Grab the starting address, and adjust it for
	STA	$FD	;the color RAM before we get started.
	LDA	$FC
	STA	$FE
	LDX	TILE
	;DRAW THE TOP 3 CHARACTERS
	LDA	TILE_DATA_TL,X
	LDY	#0
	STA	($FB),Y
	LDA	TILE_DATA_TM,X
	INY
	STA	($FB),Y	
	LDA	TILE_DATA_TR,X
	INY
	STA	($FB),Y	
	;MOVE DOWN TO NEXT LINE
	LDY	#40
	;DRAW THE MIDDLE 3 CHARACTERS
	LDA	TILE_DATA_ML,X
	STA	($FB),Y
	LDA	TILE_DATA_MM,X
	INY
	STA	($FB),Y	
	LDA	TILE_DATA_MR,X
	INY
	STA	($FB),Y	
	;MOVE DOWN TO NEXT LINE
	LDY	#80
	;DRAW THE BOTTOM 3 CHARACTERS
	LDA	TILE_DATA_BL,X
	STA	($FB),Y
	LDA	TILE_DATA_BM,X
	INY
	STA	($FB),Y	
	LDA	TILE_DATA_BR,X
	INY
	STA	($FB),Y
	;NOW DO THE COLOR
PT01:	LDA	$FE
	SEC
	SBC	#$08	;adjust to color RAM area by SUBTRACTING $0800	
	STA	$FE
	;DRAW THE TOP 3 COLORS
	LDA	TILE_COLOR_TL,X
	LDY	#0
	STA	($FD),Y
	LDA	TILE_COLOR_TM,X
	INY
	STA	($FD),Y	
	LDA	TILE_COLOR_TR,X
	INY
	STA	($FD),Y	
	;MOVE DOWN TO NEXT LINE
	LDY	#40
	;DRAW THE MIDDLE 3 COLORS
	LDA	TILE_COLOR_ML,X
	STA	($FD),Y
	LDA	TILE_COLOR_MM,X
	INY
	STA	($FD),Y	
	LDA	TILE_COLOR_MR,X
	INY
	STA	($FD),Y	
	;MOVE DOWN TO NEXT LINE
	LDY	#80	
	;DRAW THE BOTTOM 3 COLORS
	LDA	TILE_COLOR_BL,X
	STA	($FD),Y
	LDA	TILE_COLOR_BM,X
	INY
	STA	($FD),Y	
	LDA	TILE_COLOR_BR,X
	INY
	STA	($FD),Y	
	RTS	

;This routine plots a transparent tile from the tile database
;anywhere on screen.  But first you must define the tile number
;in the TILE variable, as well as the starting screen address must
;be defined in $FB.  Also, this routine is slower than the usual
;tile routine, so is only used for sprites.  The ":" character ($3A)
;is not drawn.
PLOT_TRANSPARENT_TILE:
	LDA	$FB	;Grab the starting address, and adjust it for
	STA	$FD	;the color RAM before we get started.
	LDA	$FC
	STA	$FE
	LDX	TILE
	;DRAW THE TOP 3 CHARACTERS
	LDA	TILE_DATA_TL,X
	LDY	#0
	CMP	#$3A
	BEQ	PTT01
	STA	($FB),Y
PTT01:	LDA	TILE_DATA_TM,X
	INY
	CMP	#$3A
	BEQ	PTT02
	STA	($FB),Y	
PTT02:	LDA	TILE_DATA_TR,X
	INY
	CMP	#$3A
	BEQ	PTT03
	STA	($FB),Y	
	;MOVE DOWN TO NEXT LINE
PTT03:	LDY	#40
	;DRAW THE MIDDLE 3 CHARACTERS
	LDA	TILE_DATA_ML,X
	CMP	#$3A
	BEQ	PTT04
	STA	($FB),Y
PTT04:	LDA	TILE_DATA_MM,X
	INY
	CMP	#$3A
	BEQ	PTT05
	STA	($FB),Y	
PTT05:	LDA	TILE_DATA_MR,X
	INY
	CMP	#$3A
	BEQ	PTT06
	STA	($FB),Y	
	;MOVE DOWN TO NEXT LINE
PTT06:	LDY	#80
	;DRAW THE BOTTOM 3 CHARACTERS
	LDA	TILE_DATA_BL,X
	CMP	#$3A
	BEQ	PTT07
	STA	($FB),Y
PTT07:	LDA	TILE_DATA_BM,X
	INY
	CMP	#$3A
	BEQ	PTT08
	STA	($FB),Y	
PTT08:	LDA	TILE_DATA_BR,X
	INY
	CMP	#$3A
	BEQ	PTT09
	STA	($FB),Y	
PTT09:		;NOW DO THE COLOR
	LDA	$FE
	SEC
	SBC	#$08	;adjust to color RAM area by SUBTRACTING $0800	
	STA	$FE
	;DRAW THE TOP 3 COLORS
	LDA	TILE_COLOR_TL,X
	LDY	#0
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT10
	STA	($FD),Y
PTT10:	LDA	TILE_COLOR_TM,X
	INY
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT11
	STA	($FD),Y	
PTT11:	LDA	TILE_COLOR_TR,X
	INY
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT12
	STA	($FD),Y	
	;MOVE DOWN TO NEXT LINE
PTT12:	LDY	#40
	;DRAW THE MIDDLE 3 COLORS
	LDA	TILE_COLOR_ML,X
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT13
	STA	($FD),Y
PTT13:	LDA	TILE_COLOR_MM,X
	INY
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT14
	STA	($FD),Y	
PTT14:	LDA	TILE_COLOR_MR,X
	INY
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT15
	STA	($FD),Y	
	;MOVE DOWN TO NEXT LINE
PTT15:	LDY	#80
	;DRAW THE BOTTOM 3 COLORS
	LDA	TILE_COLOR_BL,X
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT16
	STA	($FD),Y
PTT16:	LDA	TILE_COLOR_BM,X
	INY
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT17
	STA	($FD),Y	
PTT17:	LDA	TILE_COLOR_BR,X
	INY
	CMP	#$00	;If it is black, don't draw it.
	BEQ	PTT18
	STA	($FD),Y	
PTT18:	RTS	

DISPLAY_CURSOR:
	LDA	CURSOR_ON
	CMP	#0
	BNE	CRSR1
	LDA	$D015
	AND	#%11111110
	STA	$D015	;DISABLE SPRITE 0
	RTS
CRSR1:	;CURSOR IS ON
	;LDA 	#$90	;USE SPRITE DEF #1
	STA	$E3F8
	LDA	$D015
	ORA	#%00000001	
	STA	$D015	;ENABLE SPRITE
	LDY	CURSOR_Y
	LDA	SPRITE_CHART_Y,Y
	STA	$D001	;SPRITE 0 Y-POSTITION
	LDY	CURSOR_X
	LDA	SPRITE_CHART_XL,Y
	STA	$D000	;SPRITE 0 X-POSTITION
	RTS

;The following tables have pre-calculated positions
;for the sprite that is used to plot things on the map.

SPRITE_CHART_XL:
	!BYTE	24,48,72,96,120,144,168,192,216,240,10
SPRITE_CHART_XH:
	!BYTE	0,0,0,0,0,0,0,0,0,0,1

SPRITE_CHART_Y:
	!BYTE	50,74,98,122,146,170,194

;This routine checks to see if UNIT is occupying any space
;that is currently visible in the window.  If so, the
;flag for redrawing the window will be set.
CHECK_FOR_WINDOW_REDRAW:
	LDX	UNIT
	;FIRST CHECK HORIZONTAL
	LDA	UNIT_LOC_X,X
	CMP	MAP_WINDOW_X
	BCC	CFR1
	LDA	MAP_WINDOW_X
	CLC
	ADC	#10
	CMP	UNIT_LOC_X,X
	BCC	CFR1
	;NOW CHECK VERTICAL
	LDA	UNIT_LOC_Y,X
	CMP	MAP_WINDOW_Y
	BCC	CFR1
	LDA	MAP_WINDOW_Y
	CLC
	ADC	#6
	CMP	UNIT_LOC_Y,X
	BCC	CFR1
	LDA	#1
	STA	REDRAW_WINDOW
CFR1:	RTS

DECWRITE:
	LDA	#$00
	STA	SCREENPOS
	LDA	DECNUM
	LDX 	#2
	LDY 	#$4C
DEC1	STY 	DECB
	LSR
DEC2	ROL
	BCS 	DEC3
	CMP	DECA,X
	BCC 	DEC4
DEC3	SBC 	DECA,X
	SEC
DEC4	ROL 	DECB
	BCC 	DEC2
	STA	DECTEMP
	LDA 	DECB
	LDY	SCREENPOS
	STA	($FB),Y
	INC	SCREENPOS
	LDA	DECTEMP
	LDY 	#$13
	DEX
	BPL 	DEC1
	RTS
DECA		!BYTE  	128,160,200
DECB		!BYTE  	1
SCREENPOS	!BYTE	$00
DECTEMP		!BYTE	$00

; The following routine loads the tileset from disk
TILE_LOAD_ROUTINE:	
	LDA	#11	;LENGTH OF FILENAME
	LDX	#<TILENAME
	LDY	#>TILENAME
	JSR	$FFBD	;SETNAM A=FILE NAME LENGTH X/Y=POINTER TO FILENAME
	LDA	#$02
	LDX	#$08
	LDY	#$00
	JSR	$FFBA	;SETFLS A=LOGICAL NUMBER X=DEVICE NUMBER Y=SECONDARY
	LDX	#$00	;LOW BYTE FOR LOAD ADDRESS
	LDY	#$80	;HIGH BYTE FOR LOAD ADDRESS
	LDA	#$00
	JSR	$FFD5	;LOAD FILE A=0 FOR LOAD X/Y=LOAD ADDRESS
	JSR	$FFC3	;CLOSE FILE	
	RTS

; The following routine loads the map from disk
MAP_LOAD_ROUTINE:	
	LDA	#7	;LENGTH OF FILENAME
	LDX	#<MAPNAME
	LDY	#>MAPNAME
	JSR	$FFBD	;SETNAM A=FILE NAME LENGTH X/Y=POINTER TO FILENAME
	LDA	#$02
	LDX	#$08
	LDY	#$00
	JSR	$FFBA	;SETFLS A=LOGICAL NUMBER X=DEVICE NUMBER Y=SECONDARY
	LDX	#$00	;LOW BYTE FOR LOAD ADDRESS
	LDY	#$5D	;HIGH BYTE FOR LOAD ADDRESS
	LDA	#$00
	JSR	$FFD5	;LOAD FILE A=0 FOR LOAD X/Y=LOAD ADDRESS
	JSR	$FFC3	;CLOSE FILE	
	RTS

;Displays loading message for tiles.
DISPLAY_LOAD_MESSAGE1:
	LDY	#0
DLM1:	LDA	LOADMSG1,Y
	JSR	$FFD2
	INY
	CPY	#18
	BNE	DLM1
	RTS

;Displays loading message for map.
DISPLAY_LOAD_MESSAGE2:
	LDY	#0
DLM2:	LDA	LOAD_MSG2,Y
	STA	$E190,Y
	INY
	CPY	#12
	BNE	DLM2
	JSR	CALC_MAP_NAME
DLM3:	LDA	($FB),Y
	STA	$E19C,Y
	INY
	CPY	#16
	BNE	DLM3	
	RTS
LOAD_MSG2:	!SCR"loading map:"

LOAD_CHARSET:
	;First, write text to the screen
	LDY	#$00
LCHS01:	LDA	TEXT_LOADCHARSET,Y
	JSR	$FFD2
	INY
	CPY	#16
	BNE	LCHS01
	;then load the file.
	LDA	#11
	LDX	#<FILENAME_CHARSET
	LDY	#>FILENAME_CHARSET
	JSR	$FFBD	;SETNAM A=FILE NAME LENGTH X/Y=POINTER TO FILENAME
	LDA	#$02
	LDX	#$08
	LDY	#$00
	JSR	$FFBA	;SETFLS A=LOGICAL NUMBER X=DEVICE NUMBER Y=SECONDARY
	LDX	#$00
	LDY	#$F0	;load into $F000 (59392)
	LDA	#$00
	JSR	$FFD5	;LOAD FILE A=0 FOR LOAD X/Y=LOAD ADDRESS
	LDA	#$02
	JSR	$FFC3	;CLOSE FILE
	;	NOW DUPLICATE FIRST 64 CHARACTERS TO $F800
	SEI
	LDA	#%00110100	
	STA	$0001	;DISABLE BASIC ROM AND KERNAL ROM
	LDY	#0
CCOPY1:	LDA	$F000,Y
	STA	$F800,Y
	INY
	CPY	#00
	BNE	CCOPY1
CCOPY2:	LDA	$F100,Y
	STA	$F900,Y
	INY
	CPY	#00
	BNE	CCOPY2
	LDA	#6	
	STA	$0001	;DISABLE BASIC ROM ONLY
	CLI
	RTS

LOAD_SPRITES:
	;First, write text to the screen
	LDY	#$00
LSP01:	LDA	TEXT_LOADSPRITES,Y
	JSR	$FFD2
	INY
	CPY	#16
	BNE	LSP01
	;then load the file.
	LDA	#11
	LDX	#<FILENAME_SPRITES
	LDY	#>FILENAME_SPRITES
	JSR	$FFBD	;SETNAM A=FILE NAME LENGTH X/Y=POINTER TO FILENAME
	LDA	#$02
	LDX	#$08
	LDY	#$00
	JSR	$FFBA	;SETFLS A=LOGICAL NUMBER X=DEVICE NUMBER Y=SECONDARY
	LDX	#$00
	LDY	#$E4	;load into $E400
	LDA	#$00
	JSR	$FFD5	;LOAD FILE A=0 FOR LOAD X/Y=LOAD ADDRESS
	LDA	#$02
	JSR	$FFC3	;CLOSE FILE
	RTS

LOAD_MUSIC:
	;First, write text to the screen
	LDY	#$00
LMU01:	LDA	TEXT_LOADMUSIC,Y
	JSR	$FFD2
	INY
	CPY	#16
	BNE	LMU01
	;then load the file.
	LDA	#9
	LDX	#<FILENAME_MUSIC
	LDY	#>FILENAME_MUSIC
	JSR	$FFBD	;SETNAM A=FILE NAME LENGTH X/Y=POINTER TO FILENAME
	LDA	#$02
	LDX	#$08
	LDY	#$00
	JSR	$FFBA	;SETFLS A=LOGICAL NUMBER X=DEVICE NUMBER Y=SECONDARY
	LDX	#$00
	LDY	#$A0	;load into $A000
	LDA	#$00
	JSR	$FFD5	;LOAD FILE A=0 FOR LOAD X/Y=LOAD ADDRESS
	LDA	#$02
	JSR	$FFC3	;CLOSE FILE
	RTS

GREEN_SCREEN:
CS02:	LDA	#5	;GREEN	
	LDX	#$00
CS03:	STA	$D800,X
	STA	$D900,X
	STA	$DA00,X
	INX
	CPX	#$00
	BNE	CS03
CS04:	STA	$DB00,X
	INX
	CPX	#$E8
	BNE	CS04	
	RTS

DISPLAY_GAME_SCREEN:
	;SET SOURCE
	LDA	#<SCR_TEXT
	STA	$FB
	LDA	#>SCR_TEXT
	STA	$FC
	;SET DESTINATION
	LDA	#$00
	STA	$FD
	LDA	#$E0
	STA	$FE
	;SET END
	LDA	#$E3
	STA	DGS5+1
	LDA	#$E7
	STA	DGS6+1
	JSR	DECOMPRESS_SCREEN
	;SET SOURCE
	LDA	#<SCR_COLOR
	STA	$FB
	LDA	#>SCR_COLOR
	STA	$FC
	;SET DESTINATION
	LDA	#$00
	STA	$FD
	LDA	#$D8
	STA	$FE
	;SET END
	LDA	#$DB
	STA	DGS5+1
	LDA	#$E7
	STA	DGS6+1
	JSR	DECOMPRESS_SCREEN
	RTS

RESET_KEYS_AMMO:
	LDA	#$00
	STA	KEYS
	STA	AMMO_PISTOL
	STA	AMMO_PLASMA
	STA	INV_BOMBS
	STA	INV_EMP		
	STA	INV_MEDKIT
	STA	INV_MAGNET	
	STA	SELECTED_WEAPON
	STA	SELECTED_ITEM
	STA	MAGNET_ACT
	STA	PLASMA_ACT
	STA	BIG_EXP_ACT
	STA	CYCLES
	STA	SECONDS
	STA	MINUTES
	STA	HOURS
	RTS

DISPLAY_INTRO_SCREEN:
	;SET SOURCE
	LDA	#<INTRO_TEXT
	STA	$FB
	LDA	#>INTRO_TEXT
	STA	$FC
	;SET DESTINATION
	LDA	#$00
	STA	$FD
	LDA	#$E0
	STA	$FE
	;SET END
	LDA	#$E3
	STA	DGS5+1
	LDA	#$E7
	STA	DGS6+1
	JSR	DECOMPRESS_SCREEN
	;SET SOURCE
	LDA	#<INTRO_COLOR
	STA	$FB
	LDA	#>INTRO_COLOR
	STA	$FC
	;SET DESTINATION
	LDA	#$00
	STA	$FD
	LDA	#$D8
	STA	$FE
	;SET END
	LDA	#$DB
	STA	DGS5+1
	LDA	#$E7
	STA	DGS6+1
	JSR	DECOMPRESS_SCREEN
	RTS

DISPLAY_ENDGAME_SCREEN:
	LDA	#%00000000	;disable ALL sprites
	STA	$D015 
	JSR	CS02	;set monochrome screen for now.
	;SET SOURCE
	LDA	#<SCR_ENDGAME
	STA	$FB
	LDA	#>SCR_ENDGAME
	STA	$FC
	;SET DESTINATION
	LDA	#$00
	STA	$FD
	LDA	#$E0
	STA	$FE
	;SET END
	LDA	#$E3
	STA	DGS5+1
	LDA	#$E7
	STA	DGS6+1
	JSR	DECOMPRESS_SCREEN
	JSR	DISPLAY_STATS
	RTS
DISPLAY_STATS:
	;display map name
	JSR	CALC_MAP_NAME
DEG3:	LDA	($FB),Y
	STA	$E1CE,Y
	INY
	CPY	#16
	BNE	DEG3	
	;display elapsed time
	LDA	HOURS
	STA	DECNUM
	LDA	#$E2
	STA	$FC
	LDA	#$1D
	STA	$FB
	JSR	DECWRITE
	LDA	MINUTES
	STA	DECNUM
	LDA	#$E2
	STA	$FC
	LDA	#$20
	STA	$FB
	JSR	DECWRITE
	LDA	SECONDS
	STA	DECNUM
	LDA	#$E2
	STA	$FC
	LDA	#$23
	STA	$FB
	JSR	DECWRITE
	LDA	#32	;SPACE
	STA	$E21D
	LDA	#58	;COLON
	STA	$E220
	STA	$E223
	;count robots remaining
	LDX	#1
	LDA	#0
	STA	DECNUM
DEG7:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	DEG8
	INC	DECNUM
DEG8:	INX
	CPX	#28
	BNE	DEG7
	LDA	#$E2
	STA	$FC
	LDA	#$6E
	STA	$FB
	JSR	DECWRITE
	;Count secrets remaining
	LDA	#0
	STA	DECNUM
	LDX	#48
DEG9:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	DEG10
	INC	DECNUM
DEG10:	INX
	CPX	#64
	BNE	DEG9
	LDA	#$E2
	STA	$FC
	LDA	#$BE
	STA	$FB
	JSR	DECWRITE
	;display difficulty level
	LDY	DIFF_LEVEL
	LDA	DIFF_LEVEL_LEN,Y
	TAY	
	LDX	#0
DEG11:	LDA	DIFF_LEVEL_WORDS,Y
	CMP	#0
	BEQ	DEG12
	STA	$E30E,X
	INY
	INX
	JMP	DEG11
DEG12:	RTS

DIFF_LEVEL_WORDS:
	!SCR "easy",0,"normal",0,"hard",0
DIFF_LEVEL_LEN:
	!BYTE 0,5,12

DECOMPRESS_SCREEN:
	LDY	#00
DGS1:	LDA	($FB),Y
	CMP	#96	;REPEAT FLAG
	BEQ	DGS10	
DGS2:	STA	($FD),Y
	;CHECK TO SEE IF WE REACHED $83E7 YET.	
DGS4:	LDA	$FE
DGS5:	CMP	#$83	;SELF MODIFYING CODE
	BNE	DGS3
	LDA	$FD
DGS6:	CMP	#$E7	;SELF MODIFYING CODE
	BNE	DGS3
	RTS
DGS3:	JSR	INC_SOURCE
	JSR	INC_DEST
	JMP	DGS1
DGS10:	;REPEAT CODE
	JSR	INC_SOURCE
	LDA	($FB),Y
	STA	RPT
	JSR	INC_SOURCE
	LDA	($FB),Y
	TAX
DGS11:	LDA	RPT
	STA	($FD),Y
	JSR	INC_DEST
	DEX
	CPX	#$FF
	BNE	DGS11
	LDA	$FD
	SEC
	SBC	#01
	STA	$FD
	LDA	$FE
	SBC	#00
	STA	$FE
	JMP	DGS4	
INC_SOURCE:
	LDA	$FB
	CLC
	ADC	#01
	STA	$FB
	LDA	$FC
	ADC	#00
	STA	$FC
	RTS
INC_DEST:
	LDA	$FD
	CLC
	ADC	#01
	STA	$FD
	LDA	$FE
	ADC	#00
	STA	$FE
	RTS
RPT	!BYTE 00	;repeat value

DISPLAY_PLAYER_HEALTH:
	LDA	UNIT_HEALTH	;No index needed because it is the player
	LSR			;divide by two
	STA	TEMP_A
	LDY	#00
DPH01:	CPY	TEMP_A
	BEQ	DPH02	
	LDA	#$66		;GRAY BLOCK
	STA	$E3BA,Y
	INY	
	JMP	DPH01	
DPH02:	LDA	UNIT_HEALTH
	AND	#%00000001
	CMP	#%00000001
	BNE	DPH03
	LDA	#$5C		;HALF GRAY BLOCK
	STA	$E3BA,Y
	INY
DPH03:	CPY	#6
	BEQ	DPH04
	LDA	#$20		;SPACE
	STA	$E3BA,Y	
	INY
	JMP	DPH03
DPH04:	RTS

CYCLE_ITEM:
	LDA	#13		;CHANGE-ITEM-SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	LDA	#20
	STA	KEYTIMER
	INC	SELECTED_ITEM
	LDA	SELECTED_ITEM
	CMP	#5
	BEQ	CYIT1
	JMP	DISPLAY_ITEM
CYIT1:	LDA	#0
	STA	SELECTED_ITEM
	JMP	DISPLAY_ITEM

DISPLAY_ITEM:
	JSR	PRESELECT_ITEM
DSIT00:	LDA	SELECTED_ITEM
	CMP	#0	;no items to show
	BNE	DSIT01
	;add routine to draw blank space
	RTS
DSIT01:	CMP	#5	;number too high!
	BNE	DSIT0A
	LDA	#0
	STA	SELECTED_ITEM
	RTS
DSIT0A:	CMP	#1	;bomb
	BNE	DSIT03
	LDA	INV_BOMBS
	CMP	#0	;did we run out?
	BNE	DSIT02
	INC	SELECTED_ITEM
	JMP	DSIT00
DSIT02:	JSR	DISPLAY_TIMEBOMB
	RTS
DSIT03:	CMP	#2	;emp
	BNE	DSIT05
	LDA	INV_EMP
	CMP	#0	;did we run out?
	BNE	DSIT04
	INC	SELECTED_ITEM
	JMP	DSIT00
DSIT04:	JSR	DISPLAY_EMP
	RTS
DSIT05:	CMP	#3	;medkit
	BNE	DSIT07
	LDA	INV_MEDKIT
	CMP	#0	;did we run out?
	BNE	DSIT06
	INC	SELECTED_ITEM
	JMP	DSIT00
DSIT06:	JSR	DISPLAY_MEDKIT
	RTS
DSIT07:	CMP	#4	;magnet
	BNE	DSIT09
	LDA	INV_MAGNET
	CMP	#0	;did we run out?
	BNE	DSIT08
	INC	SELECTED_ITEM
	JMP	DSIT09
DSIT08:	JSR	DISPLAY_MAGNET
	RTS
DSIT09:	LDA	#0
	STA	SELECTED_ITEM
	JSR	PRESELECT_ITEM
	JMP	DISPLAY_ITEM

;This routine checks to see if currently selected
;item is zero.  And if it is, then it checks inventories
;of other items to decide which item to automatically
;select for the user.
PRESELECT_ITEM:
	LDA	SELECTED_ITEM
	CMP	#0		;If item already selected, return
	BEQ	PRSI01
	RTS	
PRSI01:	LDA	INV_BOMBS
	CMP	#0
	BEQ	PRSI02
	LDA	#1	;BOMB
	STA	SELECTED_ITEM
	RTS
PRSI02:	LDA	INV_EMP
	CMP	#0
	BEQ	PRSI03
	LDA	#2	;EMP
	STA	SELECTED_ITEM
	RTS
PRSI03:	LDA	INV_MEDKIT
	CMP	#0
	BEQ	PRSI04
	LDA	#3	;MEDKIT
	STA	SELECTED_ITEM
	RTS
PRSI04:	LDA	INV_MAGNET
	CMP	#0
	BEQ	PRSI05
	LDA	#4	;MAGNET
	STA	SELECTED_ITEM
	RTS
PRSI05:	;Nothing found in inventory at this point, so set
	;selected-item to zero.
	LDA	#0	;nothing in inventory
	STA	SELECTED_ITEM
	JSR	DISPLAY_BLANK_ITEM
	RTS

DISPLAY_TIMEBOMB:
	LDA	$D015
	ORA	#%00011000	;enable sprites 3 & 4
	STA	$D015
	LDA	$D01C	
	AND	#%11100111	;sprite 3 and 4 are hi-res
	STA	$D01C 
	LDA	#06	;blue is primary color
	STA	$D02A	;SPRITE COLOR 3
	LDA	#07	;yellow is primary color
	STA	$D02B	;SPRITE COLOR 4
	LDA 	#$94
	STA	$E3FB	;SPRITE POINTER	sprite #3
	LDA 	#$95
	STA	$E3FC	;SPRITE POINTER	sprite #4
	LDA	INV_BOMBS
	STA	DECNUM
	LDA	#$05
	STA	$FB
	LDA	#$E2
	STA	$FC
	JSR	DECWRITE		
	RTS

DISPLAY_EMP:
	LDA	$D015
	ORA	#%00011000	;enable sprites 3 & 4
	STA	$D015
	LDA	$D01C	
	AND	#%11100111
	ORA	#%00011000	;sprite 3 & 4 are multicolor
	STA	$D01C 
	LDA	#02	;red is primary color
	STA	$D02A	;SPRITE COLOR 3
	STA	$D02B	;SPRITE COLOR 4
	LDA 	#$96
	STA	$E3FB	;SPRITE POINTER	sprite #3
	LDA 	#$97
	STA	$E3FC	;SPRITE POINTER	sprite #4
	LDA	INV_EMP
	STA	DECNUM
	LDA	#$05
	STA	$FB
	LDA	#$E2
	STA	$FC
	JSR	DECWRITE	
	RTS

DISPLAY_MEDKIT:
	LDA	$D015
	ORA	#%00011000	;enable sprites 3 & 4
	STA	$D015
	LDA	$D01C	
	AND	#%11100111
	ORA	#%00011000	;sprite 3 & 4 are multicolor
	STA	$D01C 
	LDA	#02	;red is primary color
	STA	$D02A	;SPRITE COLOR 3
	STA	$D02B	;SPRITE COLOR 4
	LDA 	#$92
	STA	$E3FB	;SPRITE POINTER	sprite #3
	LDA 	#$93
	STA	$E3FC	;SPRITE POINTER	sprite #4
	LDA	INV_MEDKIT
	STA	DECNUM
	LDA	#$05
	STA	$FB
	LDA	#$E2
	STA	$FC
	JSR	DECWRITE	
	RTS

DISPLAY_MAGNET:
	LDA	$D015
	ORA	#%00011000	;enable sprites 3 & 4
	STA	$D015
	LDA	$D01C	
	AND	#%11100111
	ORA	#%00011000	;sprite 3 & 4 are multicolor
	STA	$D01C 
	LDA	#02	;red is primary color
	STA	$D02A	;SPRITE COLOR 3
	STA	$D02B	;SPRITE COLOR 4 
	LDA 	#$98
	STA	$E3FB	;SPRITE POINTER	sprite #3
	LDA 	#$99
	STA	$E3FC	;SPRITE POINTER	sprite #4
	LDA	INV_MAGNET
	STA	DECNUM
	LDA	#$05
	STA	$FB
	LDA	#$E2
	STA	$FC
	JSR	DECWRITE	
	RTS

DISPLAY_BLANK_ITEM:
	LDA	$D015
	AND	#%11100111	;disable sprites 3 & 4
	STA	$D015 
	;Clear numbers
	LDA	#32
	STA	$E205
	STA	$E206
	STA	$E207
	RTS

CYCLE_WEAPON:
	LDA	#12		;CHANGE WEAPON-SOUND
	JSR	PLAY_SOUND	;SOUND PLAY
	LDA	#20
	STA	KEYTIMER
	INC	SELECTED_WEAPON
	LDA	SELECTED_WEAPON
	CMP	#2
	BNE	CYWE1
	JMP	DISPLAY_WEAPON
CYWE1:	LDA	#0
	STA	SELECTED_WEAPON
	JMP	DISPLAY_WEAPON

DISPLAY_WEAPON:
	JSR	PRESELECT_WEAPON
	LDA	SELECTED_WEAPON
	CMP	#0	;no weapon to show
	BNE	DSWP01
	;add routine to draw blank space
	RTS
DSWP01:	CMP	#1	;PISTOL
	BNE	DSWP03
	LDA	AMMO_PISTOL
	CMP	#0	;did we run out?
	BNE	DSWP02
	LDA	#0
	STA	SELECTED_WEAPON
	JMP	DISPLAY_WEAPON
DSWP02:	JSR	DISPLAY_PISTOL
	RTS
DSWP03:	CMP	#2	;PLASMA GUN
	BNE	DSWP05
	LDA	AMMO_PLASMA
	CMP	#0	;did we run out?
	BNE	DSWP04
	LDA	#0
	STA	SELECTED_WEAPON
	JMP	DISPLAY_WEAPON
DSWP04:	JSR	DISPLAY_PLASMA_GUN
	RTS
DSWP05:	LDA	#0
	STA	SELECTED_WEAPON	;should never happen
	JMP	DISPLAY_WEAPON
	
;This routine checks to see if currently selected
;weapon is zero.  And if it is, then it checks inventories
;of other weapons to decide which item to automatically
;select for the user.
PRESELECT_WEAPON:
	LDA	SELECTED_WEAPON
	CMP	#0		;If item already selected, return
	BEQ	PRSW01
	RTS	
PRSW01:	LDA	AMMO_PISTOL
	CMP	#0
	BEQ	PRSW02
	LDA	#1	;PISTOL
	STA	SELECTED_WEAPON
	RTS
PRSW02:	LDA	AMMO_PLASMA
	CMP	#0
	BEQ	PRSW04
	LDA	#2	;PLASMAGUN
	STA	SELECTED_WEAPON
	RTS
PRSW04:	;Nothing found in inventory at this point, so set
	;selected-item to zero.
	LDA	#0	;nothing in inventory
	STA	SELECTED_WEAPON
	JSR	DISPLAY_BLANK_WEAPON
	RTS

DISPLAY_PLASMA_GUN:
	LDA	$D015
	ORA	#%00000110	;enable sprites 1 & 2
	STA	$D015
	LDA	$D01C	
	AND	#%11111001
	ORA	#%00000110	;sprite 1 & 2 are multicolor
	STA	$D01C 
	LDA	#06	;BLUE is primary color
	STA	$D028	;SPRITE COLOR 1
	STA	$D029	;SPRITE COLOR 2
	LDA 	#$9C
	STA	$E3F9	;SPRITE POINTER	sprite #1
	LDA 	#$9D
	STA	$E3FA	;SPRITE POINTER	sprite #2
	LDA	AMMO_PLASMA
	STA	DECNUM
	LDA	#$ED
	STA	$FB
	LDA	#$E0
	STA	$FC
	JSR	DECWRITE
	RTS

DISPLAY_PISTOL:
	LDA	$D015
	ORA	#%00000110	;enable sprites 1 & 2
	STA	$D015 
	LDA	$D01C	
	AND	#%11111001
	ORA	#%00000100	;sprite 1=hires, 2=multicolor
	STA	$D01C
	LDA	#14	;light blue is primary color
	STA	$D028	;SPRITE COLOR 1
	STA	$D029	;SPRITE COLOR 2
	LDA 	#$9A
	STA	$E3F9	;SPRITE POINTER	sprite #1
	LDA 	#$9B
	STA	$E3FA	;SPRITE POINTER	sprite #2
	LDA	AMMO_PISTOL
	STA	DECNUM
	LDA	#$ED
	STA	$FB
	LDA	#$E0
	STA	$FC
	JSR	DECWRITE
	RTS

DISPLAY_BLANK_WEAPON:
	LDA	$D015
	AND	#%11111001	;disable sprites 1 & 2
	STA	$D015 

	;now clear numbers.
	LDA	#32
	STA	$E0ED
	STA	$E0EE
	STA	$E0EF	
	RTS	

DISPLAY_KEYS:
	LDA	#32
	STA	$E27A	;ERASE ALL 3 SPOTS
	STA	$E27B
	STA	$E27C
	STA	$E27D
	STA	$E27E
	STA	$E27F
	STA	$E2A2
	STA	$E2A3
	STA	$E2A4
	STA	$E2A5
	STA	$E2A6
	STA	$E2A7
	LDA	KEYS
	AND	#%00000001
	CMP	#%00000001	;Spade key
	BNE	DKS1
	LDA	#$63
	STA	$E27A
	LDA	#$4D
	STA	$E27B
	LDA	#$41
	STA	$E2A2	
	LDA	#$67
	STA	$E2A3
DKS1:	LDA	KEYS
	AND	#%00000010
	CMP	#%00000010	;heart key
	BNE	DKS2
	LDA	#$63
	STA	$E27C
	LDA	#$4D
	STA	$E27D
	LDA	#$53
	STA	$E2A4
	LDA	#$67
	STA	$E2A5
DKS2:	LDA	KEYS
	AND	#%00000100
	CMP	#%00000100	;star key
	BNE	DKS3
	LDA	#$63
	STA	$E27E
	LDA	#$4D
	STA	$E27F
	LDA	#$2A
	STA	$E2A6
	LDA	#$67
	STA	$E2A7
DKS3:	RTS

GAME_OVER:
	;stop game clock
	LDA	#0
	STA	CLOCK_ACTIVE
	;Did player die or win?
	LDA	UNIT_TYPE
	CMP	#0
	BNE	GOM0
	LDA	#111	;dead player tile
	STA	UNIT_TILE
	JSR	DISPLAY_PLAYER_SPRITE
	LDA	#100
	STA	KEYTIMER
GOM0:	JSR	BACKGROUND_TASKS
	LDA	KEYTIMER
	CMP	#0
	BNE	GOM0
	;stop screen shake
	LDA	#0
	STA	SCREEN_SHAKE
	;turn off character sprite
	LDA	$D015
	AND	#%00011111
	STA	$D015
	;display game over message
	LDX	#0
GOM1:	LDA	GAMEOVER1,X
	STA	$E173,X
	LDA	GAMEOVER2,X
	STA	$E19B,X
	LDA	GAMEOVER3,X
	STA	$E1C3,X
GOM1A:	INX
	CPX	#11
	BNE	GOM1
	LDA	#100
	STA	KEYTIMER
GOM2:	JSR	ANIMATE_GAMEOVER
	LDA	KEYTIMER
	CMP	#0
	BNE	GOM2
	LDA	#0
	STA	$00C6	;CLEAR KEYBOARD BUFFER
	JSR	CLEAR_SNES_PAD
GOM3:	JSR	ANIMATE_GAMEOVER
	JSR	SNES_CONTROLER_READ
	LDA	NEW_B
	CMP	#1
	BEQ	GOM4
	JSR	$FFE4
	CMP	#$00
	BEQ	GOM3
GOM4:	LDA	#0
	STA	$00C6	;CLEAR KEYBOARD BUFFER
	JSR	CLEAR_SNES_PAD
	;LDA	#15		;menu beep
	;JSR	PLAY_SOUND	;SOUND PLAY
	JSR	DISPLAY_ENDGAME_SCREEN
	JSR	PLAY_GAME_OVER_MUSIC
	JSR	DISPLAY_WIN_LOSE
	;turn off all sprites
	LDA	#%00000000
	STA	$D015
	;Wait for keypress
GOM5:	JSR	SNES_CONTROLER_READ
	LDA	NEW_B
	CMP	#1
	BEQ	GOM6
	JSR	$FFE4
	CMP	#$00
	BEQ	GOM5
	;LDA	#0
	;STA	$00C6	;CLEAR KEYBOARD BUFFER	
GOM6:	JMP	INTRO_SCREEN

ANIMATE_GAMEOVER:
	LDX	#0
	LDA	$D027	;CURSOR SPRITE COLOR
ANGO:	STA	$D973,X
	STA	$D99B,X
	STA	$D9C3,X
	INX
	CPX	#11
	BNE	ANGO
	RTS

GAMEOVER1:	!BYTE	$70,$40,$40,$40,$40,$40,$40,$40,$40,$40,$6e
GAMEOVER2:	!BYTE	$5d,$07,$01,$0d,$05,$20,$0f,$16,$05,$12,$5d
GAMEOVER3:	!BYTE	$6d,$40,$40,$40,$40,$40,$40,$40,$40,$40,$7d

PLAY_GAME_OVER_MUSIC:
	LDA	#1
	STA	MUSIC_STATE
	LDA	UNIT_TYPE
	CMP	#0
	BEQ	PGOM
	LDA	#6		;pick song
	JSR	$A000		;START MUSIC
	RTS
PGOM:	LDA	#7		;pick song
	JSR	$A000		;START MUSIC
	RTS

DISPLAY_WIN_LOSE:
	LDX	#0
	LDA	UNIT_TYPE
	CMP	#0
	BEQ	DWL5
DWL1:	LDA	WIN_MSG,X
	STA	$E0D8,X
	INX
	CPX	#8
	BNE	DWL1
	RTS
DWL5:	LDA	LOS_MSG,X
	STA	$E0D8,X
	INX
	CPX	#9
	BNE	DWL5
	RTS

WIN_MSG:	!SCR"you win!"
LOS_MSG:	!SCR"you lose!"

PRINT_INTRO_MESSAGE:
	LDA	#<INTRO_MESSAGE
	STA	$FB
	LDA	#>INTRO_MESSAGE
	STA	$FC
	JSR	PRINT_INFO
	RTS

;This routine will print something to the "information" window
;at the bottom left of the screen.  You must first define the 
;source of the text in $FB. The text should terminate with
;a null character.
PRINT_INFO:
	JSR	SCROLL_INFO	;New text always causes a scroll
	LDY	#0
	STY	PRINTX
PI01:	LDA	($FB),Y
	CMP	#0	;null terminates string
	BNE	PI02
	RTS
PI02:	CMP	#255	;return
	BNE	PI03
	LDX	#0
	STX	PRINTX
	JSR	SCROLL_INFO
	JMP	PI04
PI03:	LDX	PRINTX
	STA	$E3C0,X
	INC	PRINTX
PI04:	INY
	JMP	PI01
PRINTX:	!BYTE 00	;used to store X-cursor location

;This routine scrolls the info screen by one row, clearing
;a new row at the bottom.
SCROLL_INFO:
	SEI
	LDA	#%00110100	
	STA	$0001	;DISABLE BASIC ROM AND KERNAL ROM
	;--------------
	LDX	#0
SCI1:	LDA	$E398,X
	STA	$E370,X
	LDA	$E3C0,X	;BOTTOM ROW
	STA	$E398,X
	INX
	CPX	#33
	BNE	SCI1
	;NOW CLEAR BOTTOM ROW
	LDX	#0
	LDA	#32
SCI2:	STA	$E3C0,X;BOTTOM ROW
	INX
	CPX	#33
	BNE	SCI2
	;--------------
	LDA	#%00110110	
	STA	$0001	;DISABLE BASIC ROM ONLY
	CLI
	RTS		

INTRO_SCREEN:
	LDA	#15
	STA	$D418	;	volume
	LDA	#4		;pick song
	JSR	$A000		;START MUSIC
	LDA	#1
	STA	MUSIC_STATE
	JSR	DISPLAY_INTRO_SCREEN
	JSR	DISPLAY_MAP_NAME
	JSR	CHANGE_DIFFICULTY_LEVEL
	LDA	#0
	STA	MENUY
	JSR	HIGHLIGHT_MENU_OPTION
	JSR	CLEAR_SNES_PAD
	JSR	CLEAR_KEY_BUFFER
ISLOOP:	LDA	BGTIMER1
	CMP	#1
	BNE	IS001B
	LDA	#0
	STA	BGTIMER1
	JSR	HIGHLIGHT_MENU_OPTION
IS001B:	JSR	$F142	;SCAN for key presses
	CMP	#00
	BEQ	IS011	;If none found, try SNES
	CMP	#$11	;CURSOR DOWN
	BNE	IS001
	JSR	MENU_DOWN
	JMP	ISLOOP
IS001:	CMP	#$91	;CURSOR UP
	BNE	IS002
	JSR	MENU_UP
	JMP	ISLOOP
IS002:	CMP	#32	;SPACE
	BNE	IS003
	JMP	EXEC_COMMAND
IS003:	CMP	KEY_MOVE_UP
	BNE	IS004
	JSR	MENU_UP
	JMP	ISLOOP
IS004:	CMP	KEY_MOVE_DOWN
	BNE	IS005
	JSR	MENU_DOWN
	JMP	ISLOOP
IS005:	CMP	#13	;RETURN
	BNE	IS006
	JMP	EXEC_COMMAND	
IS006:	CMP	#49	;1-key
	BNE	IS007
	LDA	#0		;pick song (title music)
	JSR	$A000		;START MUSIC
	JMP	ISLOOP
IS007:	CMP	#50	;2-key
	BNE	IS008
	LDA	#1		;pick song
	JSR	$A000		;START MUSIC
	JMP	ISLOOP
IS008:	CMP	#51	;3-key
	BNE	IS009
	LDA	#2		;pick song
	JSR	$A000		;START MUSIC
	JMP	ISLOOP
IS009:	CMP	#52	;4-key
	BNE	IS010
	LDA	#3		;pick song
	JSR	$A000		;START MUSIC
	JMP	ISLOOP
IS010:	CMP	#53	;5-key
	BNE	IS011
	LDA	#4		;pick song
	JSR	$A000		;START MUSIC
	JMP	ISLOOP
IS011:	;Now check SNES status for menu
	LDA	NEW_UP
	CMP	#1
	BNE	IS012
	JSR	MENU_UP
	LDA	#0
	STA	NEW_UP
	JMP	ISLOOP
IS012:	LDA	NEW_DOWN
	CMP	#1
	BNE	IS013
	JSR	MENU_DOWN
	LDA	#0
	STA	NEW_DOWN
	JMP	ISLOOP
IS013:	LDA	NEW_B
	CMP	#1
	BNE	IS014
	LDA	#0
	STA	NEW_B
	JMP	EXEC_COMMAND
IS014:	JMP	ISLOOP

MENU_UP:
	LDA	MENUY
	CMP	#0
	BNE	MENUP1
	RTS
MENUP1:	JSR	UNHIGHLIGHT_MENU_OPTION
	DEC	MENUY
	LDA	#3
	STA	SPRITECOLSTATE
	JSR	HIGHLIGHT_MENU_OPTION
	LDA	#15		;MENU BEEP
	JSR	PLAY_SOUND	;SOUND PLAY
	RTS

MENU_DOWN:
	LDA	MENUY
	CMP	#3
	BNE	MENDN1
	RTS
MENDN1:	JSR	UNHIGHLIGHT_MENU_OPTION
	INC	MENUY
	LDA	#3
	STA	SPRITECOLSTATE
	JSR	HIGHLIGHT_MENU_OPTION
	LDA	#15		;menu beep
	JSR	PLAY_SOUND	;SOUND PLAY
	RTS

EXEC_COMMAND:
	LDA	#17		;SHORT BEEP
	JSR	PLAY_SOUND	;SOUND PLAY
	LDA	MENUY
	CMP	#00	;START GAME
	BNE	EXEC1
	JSR	SET_CONTROLS
	LDA	#5		;pick song (blank song)
	JSR	$A000		;START MUSIC
	LDA	#0
	STA	MUSIC_STATE
	LDA	#0
	STA	$D418	;	volume
	JSR	PAUSE_UNTIL_NEXT_CYCLE
	JMP	INIT_GAME
EXEC1:	CMP	#2	;DIFF LEVEL
	BNE	EXEC05
	INC	DIFF_LEVEL
	LDA	DIFF_LEVEL
	CMP	#3
	BNE	EXEC02
	LDA	#0
	STA	DIFF_LEVEL
EXEC02:	JSR	CHANGE_DIFFICULTY_LEVEL
	JMP	ISLOOP
EXEC05:	CMP	#1	;cycle map
	BNE	EXEC06
	JSR	CYCLE_MAP
EXEC06:	CMP	#3
	BNE	EXEC07
	JSR	CYCLE_CONTROLS
EXEC07:	JMP	ISLOOP

;This routine simply pauses until the next interrupt cycle
;completes.  This will hopefully keep the sound from hanging
;when the disk drive starts up.
PAUSE_UNTIL_NEXT_CYCLE:
	LDX	#0
PUNC1:	LDA	#0
	STA	BGTIMER1
PUNC2:	LDA	BGTIMER1
	CMP	#0
	BEQ	PUNC2
	INX
	CPX	#2
	BNE	PUNC1
	RTS

CYCLE_CONTROLS:
	LDA	#0
	STA	KEYS_DEFINED
	INC	CONTROL
	LDA	CONTROL
	CMP	#3
	BNE	CCON2
	LDA	#0
	STA	CONTROL
CCON2:	;display control method on screen
	LDY	CONTROL
	LDA	CONTROLSTART,Y
	TAY
	LDX	#0
CCON3:	LDA	CONTROLTEXT,Y
	STA	$E0CC,X
	INX
	INY
	CPX	#10
	BNE	CCON3
	RTS

CONTROLTEXT:	!SCR"keyboard  "
		!SCR"custom key"
		!SCR"snes pad  "
CONTROLSTART:	!BYTE 00,10,20

CYCLE_MAP:
	INC	SELECTED_MAP
	LDA	SELECTED_MAP
	CMP	#13	;max number of maps
	BNE	CYM1
	LDA	#0
	STA	SELECTED_MAP
CYM1:	JSR	DISPLAY_MAP_NAME
	RTS

DISPLAY_MAP_NAME:
	JSR	CALC_MAP_NAME
DMN1:	LDA	($FB),Y
	STA	$E16A,Y
	INY
	CPY	#16
	BNE	DMN1
	;now set the mapname for the filesystem load
	LDA	SELECTED_MAP
	CLC
	ADC	#65
	STA	MAPNAME+6
	RTS	

CALC_MAP_NAME:
	;FIND MAP NAME
	LDA	SELECTED_MAP
	STA	$FB
	LDA	#0
	STA	$FC
	;multiply by 16 by shifting 4 times to left.
	ASL	$FB
	ROL	$FC
	ASL	$FB
	ROL	$FC
	ASL	$FB
	ROL	$FC
	ASL	$FB
	ROL	$FC
	;now add offset for mapnames	
	LDA	$FB
	CLC
	ADC	#<MAP_NAMES
	STA	$FB
	LDA	$FC
	ADC	#>MAP_NAMES
	STA	$FC
	LDY	#0
	RTS

HIGHLIGHT_MENU_OPTION:
	LDY	MENUY
	LDA	MENU_CHART_L,Y
	STA	$FB
	LDA	#$D8
	STA	$FC
	LDY	#0
RMO1:	LDX	SPRITECOLSTATE
	LDA	SPRITECOLCHART,X
	STA	($FB),Y
	INY
	CPY	#10
	BNE	RMO1	
	RTS
MENUY	!BYTE	$00	;CURRENT MENU SELECTION
MENU_CHART_L:
	!BYTE $54,$7C,$A4,$CC

UNHIGHLIGHT_MENU_OPTION:
	LDY	MENUY
	LDA	MENU_CHART_L,Y
	STA	$FB
	LDA	#$D8
	STA	$FC
	LDY	#0
URMO1:	LDA	#5	;GREEN
	STA	($FB),Y
	INY
	CPY	#10
	BNE	URMO1	
	RTS

CHANGE_DIFFICULTY_LEVEL:
	LDY	DIFF_LEVEL
	LDA	FACE_LEVEL,Y
	TAY
	;DO CHARACTERS FIRST
	LDA	ROBOT_FACE,Y
	STA	$E0DD
	INY
	LDA	ROBOT_FACE,Y
	STA	$E0DE
	INY
	LDA	ROBOT_FACE,Y
	STA	$E0DF
	INY
	LDA	ROBOT_FACE,Y
	STA	$E0E1
	INY
	LDA	ROBOT_FACE,Y
	STA	$E0E2
	INY
	LDA	ROBOT_FACE,Y
	STA	$E0E3
	INY
	LDA	ROBOT_FACE,Y
	STA	$E107
	INY
	LDA	ROBOT_FACE,Y
	STA	$E109
	;NOW DO COLORS
	INY
	LDA	ROBOT_FACE,Y
	STA	$D8DD
	INY
	LDA	ROBOT_FACE,Y
	STA	$D8DE
	INY
	LDA	ROBOT_FACE,Y
	STA	$D8DF
	INY
	LDA	ROBOT_FACE,Y
	STA	$D8E1
	INY
	LDA	ROBOT_FACE,Y
	STA	$D8E2
	INY
	LDA	ROBOT_FACE,Y
	STA	$D8E3
	RTS
DIFF_LEVEL	!BYTE 01	;default medium

ROBOT_FACE:
	!BYTE	$3A,$43,$49,$55,$43,$3A,$49,$55,$02,$01,$01,$01,$01,$02	;EASY LEVEL
	!BYTE	$40,$40,$6E,$70,$40,$40,$49,$55,$01,$01,$01,$01,$01,$01	;MEDIUM LEVEL
	!BYTE	$3A,$4D,$3A,$3A,$4E,$3A,$4D,$4E,$02,$01,$02,$02,$01,$02	;HARD LEVEL
FACE_LEVEL:
	!BYTE	0,14,28

;This routine is run after the map is loaded, but before the
;game starts.  If the diffulcty is set to normal, nothing 
;actually happens.  But if it is set to easy or hard, then
;some changes occur accordingly.
SET_DIFF_LEVEL:
	LDA	DIFF_LEVEL
	CMP	#0	;easy
	BNE	SDLE1
	JMP	SET_DIFF_EASY
SDLE1:	CMP	#2	;hard
	BNE	SDLE2
	JMP	SET_DIFF_HARD
SDLE2:	RTS

SET_DIFF_EASY:
	;Find all hidden items and double the quantity.
	LDX	#48
SDE1:	LDA	UNIT_TYPE,X
	CMP	#0
	BEQ	SDE2
	CMP	#128	;KEY
	BEQ	SDE2
	ASL	UNIT_A,X	;item qty
SDE2:	INX
	CPX	#64
	BNE	SDE1	
	RTS

SET_DIFF_HARD:
	;Find all hoverbots and change AI
	LDX	#0
SDH1:	LDA	UNIT_TYPE,X
	CMP	#2	;hoverbot left/right
	BEQ	SDH4
	CMP	#3	;hoverbot up/down
	BEQ	SDH4
SDH2:	INX	
	CPX	#28
	BNE	SDH1
	RTS
SDH4:	LDA	#4	;hoverbot attack mode
	STA	UNIT_TYPE,X
	JMP	SDH2


;This chart contains the left-most staring position for each
;row of tiles on the map-editor. 7 Rows.
MAP_CHART_L:
	!BYTE $00,$78,$F0,$68,$E0,$58,$D0

MAP_CHART_H:
	!BYTE $E0,$E0,$E0,$E1,$E1,$E2,$E2

;This routine animates the tile #204 (water) 
;and also tile 148 (trash compactor)
;And also the HVAC fan
ANIMATE_WATER:
	LDA	ANIMATE
	CMP	#1
	BEQ	AW00
	RTS
AW00:	INC	WATER_TIMER
	LDA	WATER_TIMER
	CMP	#20
	BEQ	AW01
	RTS
AW01:	LDA	#0
	STA	WATER_TIMER

LDA	TILE_DATA_BR+204
	STA	WATER_TEMP1
	LDA	TILE_DATA_MM+204
	STA	TILE_DATA_BR+204
	STA	TILE_DATA_BR+221
	LDA	TILE_DATA_TL+204
	STA	TILE_DATA_MM+204
	LDA	WATER_TEMP1
	STA	TILE_DATA_TL+204

	LDA	TILE_DATA_BL+204
	STA	WATER_TEMP1
	LDA	TILE_DATA_MR+204
	STA	TILE_DATA_BL+204
	STA	TILE_DATA_BL+221
	LDA	TILE_DATA_TM+204
	STA	TILE_DATA_MR+204
	LDA	WATER_TEMP1
	STA	TILE_DATA_TM+204
	STA	TILE_DATA_TM+221

	LDA	TILE_DATA_BM+204
	STA	WATER_TEMP1
	LDA	TILE_DATA_ML+204
	STA	TILE_DATA_BM+204
	STA	TILE_DATA_BM+221
	LDA	TILE_DATA_TR+204
	STA	TILE_DATA_ML+204
	LDA	WATER_TEMP1
	STA	TILE_DATA_TR+204
	STA	TILE_DATA_TR+221

	;now do trash compactor
TRSAN1:	LDA	TILE_COLOR_TR+148
	STA	WATER_TEMP1
	LDA	TILE_COLOR_TM+148
	STA	TILE_COLOR_TR+148
	LDA	TILE_COLOR_TL+148
	STA	TILE_COLOR_TM+148
	LDA	WATER_TEMP1
	STA	TILE_COLOR_TL+148

	LDA	TILE_COLOR_MR+148
	STA	WATER_TEMP1
	LDA	TILE_COLOR_MM+148
	STA	TILE_COLOR_MR+148
	LDA	TILE_COLOR_ML+148
	STA	TILE_COLOR_MM+148
	LDA	WATER_TEMP1
	STA	TILE_COLOR_ML+148

	LDA	TILE_COLOR_BR+148
	STA	WATER_TEMP1
	LDA	TILE_COLOR_BM+148
	STA	TILE_COLOR_BR+148
	LDA	TILE_COLOR_BL+148
	STA	TILE_COLOR_BM+148
	LDA	WATER_TEMP1
	STA	TILE_COLOR_BL+148
	;Now do HVAC fan
HVAC0:	LDA	HVAC_STATE
	CMP	#0
	BEQ	HVAC1
	LDA	#$CD
	STA	TILE_DATA_MM+196
	STA	TILE_DATA_TL+201
	LDA	#$CE
	STA	TILE_DATA_ML+197
	STA	TILE_DATA_TM+200
	LDA	#$A0
	STA	TILE_DATA_MR+196	
	STA	TILE_DATA_BM+196	
	STA	TILE_DATA_BL+197
	STA	TILE_DATA_TR+200
	LDA	#0
	STA	HVAC_STATE
	JMP	HVAC2
HVAC1:
	LDA	#$A0
	STA	TILE_DATA_MM+196
	STA	TILE_DATA_TL+201
	STA	TILE_DATA_ML+197
	STA	TILE_DATA_TM+200
	LDA	#$C2
	STA	TILE_DATA_MR+196
	STA	TILE_DATA_TR+200
	LDA	#$C0
	STA	TILE_DATA_BM+196	
	STA	TILE_DATA_BL+197
	LDA	#1
	STA	HVAC_STATE
HVAC2:	;now do cinema screen tiles
	;FIRST COPY OLD LETTERS TO THE LEFT.
	LDA	TILE_DATA_MR+20	;#2
	STA	TILE_DATA_MM+20	;#1
	LDA	TILE_DATA_ML+21	;#3
	STA	TILE_DATA_MR+20	;#2
	LDA	TILE_DATA_MM+21	;#4
	STA	TILE_DATA_ML+21	;#3
	LDA	TILE_DATA_MR+21	;#5
	STA	TILE_DATA_MM+21	;#4
	LDA	TILE_DATA_ML+22	;#6
	STA	TILE_DATA_MR+21	;#5
	;now insert new character.
	LDY	CINEMA_STATE
	LDA	CINEMA_MESSAGE,Y
	STA	TILE_DATA_ML+22	;#6

	INC	CINEMA_STATE
	LDA	CINEMA_STATE
	CMP	#197
	BNE	CINE2
	LDA	#0
	STA	CINEMA_STATE
CINE2:	;Now animate light on server computers
	LDA	TILE_DATA_MR+143
	CMP	#$D7
	BNE	CINE3
	LDA	#$D1
	JMP	CINE4
CINE3:	LDA	#$D7
CINE4:	STA	TILE_DATA_MR+143
	LDA	#1
	STA	REDRAW_WINDOW
	RTS

WATER_TIMER	!BYTE 00
WATER_TEMP1	!BYTE 00
HVAC_STATE	!BYTE 00
CINEMA_STATE	!BYTE 00

;This is the routine that allows a person to select
;a level and highlights the selection in the information
;display. It is unique to each computer since it writes
;to the screen directly.
ELEVATOR_SELECT:
	LDA	#06
	STA	PLAYER_DIRECTION
	JSR	DISPLAY_PLAYER_SPRITE
	JSR	DRAW_MAP_WINDOW
	LDX	UNIT
	LDA	UNIT_D,X	;get max levels
	STA	ELEVATOR_MAX_FLOOR
	;Now draw available levels on screen
	LDY	#0
	LDA	#$31
ELS1:	STA	$E3C6,Y
	CLC
	ADC	#01
	INY
	CPY	ELEVATOR_MAX_FLOOR
	BNE	ELS1
	LDA	UNIT_C,X		;what level are we on now?
	STA	ELEVATOR_CURRENT_FLOOR
	;Now highlight current level
	JSR	ELEVATOR_INVERT
	;Now get user input
	LDA	CONTROL	
	CMP	#2
	BNE	ELS5
	JMP	SELS5
ELS5:	;KEYBOARD INPUT
	JSR	$F142
	CMP	#$00
	BEQ	ELS5
	CMP	KEY_MOVE_LEFT
	BNE	ELS6
	JSR	ELEVATOR_DEC
	JMP	ELS5
ELS6:	CMP	KEY_MOVE_RIGHT
	BNE	ELS7
	JSR	ELEVATOR_INC
	JMP	ELS5
ELS7:	CMP	#$9D	;CURSOR LEFT
	BNE	ELS8
	JSR	ELEVATOR_DEC
	JMP	ELS5
ELS8:	CMP	#$1D	;CURSOR RIGHT
	BNE	ELS9
	JSR	ELEVATOR_INC
	JMP	ELS5
ELS9:	CMP	#$11	;CURSOR DOWN
	BNE	ELS10
ELS9B:	JSR	SCROLL_INFO
	JSR	SCROLL_INFO
	JSR	SCROLL_INFO
	JSR	CLEAR_KEY_BUFFER
	LDA	$D015	
	AND	#%11111110
	STA	$D015
	RTS
ELS10:	CMP	KEY_MOVE_DOWN
	BEQ	ELS9B
ELS11:	JMP	ELS5
SELS5:	;SNES INPUT
	JSR	SNES_CONTROLER_READ
	LDA	NEW_LEFT
	CMP	#1	
	BNE	SELS8
	JSR	ELEVATOR_DEC
	LDA	#0
	STA	NEW_LEFT
	JMP	SELS5
SELS8:	LDA	NEW_RIGHT
	CMP	#1
	BNE	SELS9
	JSR	ELEVATOR_INC
	LDA	#0
	STA	NEW_RIGHT
	JMP	SELS5
SELS9:	LDA	NEW_DOWN
	CMP	#1	
	BNE	SELS10
	JSR	SCROLL_INFO
	JSR	SCROLL_INFO
	JSR	SCROLL_INFO
	LDA	#15
	STA	KEYTIMER
	LDA	#0
	STA	NEW_DOWN
	RTS
SELS10:	JMP	SELS5

ELEVATOR_MAX_FLOOR	!BYTE 00
ELEVATOR_CURRENT_FLOOR	!BYTE 00

ELEVATOR_INVERT:
	LDA 	#$91	;USE SPRITE DEF #1
	STA	$E3F8
	;LDA	$D017
	;AND	#%11111110
	;STA	$D017	;SPRITE Y-EXPANSION OFF
	LDA	$D015	
	ORA	#%00000001
	STA	$D015
	LDY	ELEVATOR_CURRENT_FLOOR
	LDA	EL_PANEL_SPRITE,Y
	STA	$D000
	LDA	#241	;y coordinate
	STA	$D001
	RTS

EL_PANEL_SPRITE:
	!BYTE	63,71,79,87,95,103,111

ELEVATOR_INC:
	LDA	ELEVATOR_CURRENT_FLOOR
	CMP	ELEVATOR_MAX_FLOOR
	BNE	ELVIN1
	RTS
ELVIN1:	INC	ELEVATOR_CURRENT_FLOOR
	JSR	ELEVATOR_INVERT
	JSR	ELEVATOR_FIND_XY
	RTS
ELEVATOR_DEC:
	LDA	ELEVATOR_CURRENT_FLOOR
	CMP	#1
	BNE	ELVDE1
	RTS
ELVDE1:	DEC	ELEVATOR_CURRENT_FLOOR
	JSR	ELEVATOR_INVERT
	JSR	ELEVATOR_FIND_XY
	RTS

ELEVATOR_FIND_XY:
	LDX	#32	;start of doors
ELXY1:	LDA	UNIT_TYPE,X
	CMP	#19	;elevator
	BNE	ELXY5
	LDA	UNIT_C,X
	CMP	ELEVATOR_CURRENT_FLOOR
	BNE	ELXY5
	JMP	ELXY10
ELXY5:	INX
	CPX	#48
	BNE	ELXY1
	RTS
ELXY10:	LDA	UNIT_LOC_X,X	;new elevator location
	STA	UNIT_LOC_X	;player location
	SEC
	SBC	#5
	STA	MAP_WINDOW_X
	LDA	UNIT_LOC_Y,X	;new elevator location
	STA	UNIT_LOC_Y	;player location
	DEC	UNIT_LOC_Y
	SEC
	SBC	#4
	STA	MAP_WINDOW_Y
	JSR	DRAW_MAP_WINDOW
	JSR	ELEVATOR_INVERT
	LDA	#15		;elevator sound (menu beep)
	JSR	PLAY_SOUND	;SOUND PLAY
	RTS

SET_CONTROLS:
	LDA	CONTROL
	CMP	#1	;CUSTOM KEYS
	BNE	SETC1
	JSR	SET_CUSTOM_KEYS
	RTS		
SETC1:	;load standard values for key controls
	LDY	#0
SETC2:	LDA	STANDARD_CONTROLS,Y
	STA	KEY_MOVE_UP,Y
	INY
	CPY	#13
	BNE	SETC2
	RTS

STANDARD_CONTROLS:
	!BYTE	73	;MOVE UP
	!BYTE	75	;MOVE DOWN
	!BYTE	74	;MOVE LEFT
	!BYTE	76	;MOVE RIGHT
	!BYTE	87	;FIRE UP
	!BYTE	83	;FIRE DOWN
	!BYTE	65	;FIRE LEFT
	!BYTE	68	;FIRE RIGHT
	!BYTE	133	;CYCLE WEAPONS
	!BYTE	134	;CYCLE ITEMS
	!BYTE	32	;USE ITEM
	!BYTE	90	;SEARCH OBEJCT
	!BYTE	77	;MOVE OBJECT

SET_CUSTOM_KEYS:
	LDA	KEYS_DEFINED
	CMP	#0
	BEQ	SCK00
	RTS
SCK00:	JSR	CS02	;set entire screen to monochrome
	;SET SOURCE
	LDA	#<SCR_CUSTOM_KEYS
	STA	$FB
	LDA	#>SCR_CUSTOM_KEYS
	STA	$FC
	;SET DESTINATION
	LDA	#$00
	STA	$FD
	LDA	#$E0
	STA	$FE
	;SET END
	LDA	#$E3
	STA	DGS5+1
	LDA	#$E7
	STA	DGS6+1
	JSR	DECOMPRESS_SCREEN	
	;GET KEYS FROM USER
	LDA	#0
	STA	TEMP_A
	LDA	#$E1
	STA	$FC
	LDA	#$51
	STA	$FB
SCK01:	JSR	$FFE4
	CMP	#00
	BEQ	SCK01
	LDY	TEMP_A
	STA	KEY_MOVE_UP,Y
	STA	DECNUM
	JSR	DECWRITE
	LDA	$FB
	CLC
	ADC	#40
	STA	$FB
	LDA	$FC
	ADC	#00
	STA	$FC
	INC	TEMP_A
	LDA	TEMP_A
	CMP	#13
	BNE	SCK01
	LDA	#01
	STA	KEYS_DEFINED
	RTS

KEYS_DEFINED		!BYTE	00	;DEFAULT =0 

SETUP_SPRITE:
	LDA	#%00000000	
	STA	$D015	;disable all sprites
	LDA	#%00011110	;Sprites 1-4 are multicolor
	STA	$D01C		;sprites 0, 5-7 are monochrome
	LDA	#06	;BLUE
	STA	$D02C	;SPRITE COLOR 5
	LDA	#14	;LIGHT BLUE
	STA	$D02D	;SPRITE COLOR 6
	LDA	#10	;ORANGE
	STA	$D02E	;SPRITE COLOR 7
	LDA	#1	;WHITE
	STA	$D025	;SPRITE MULTICOLOR #0
	LDA	#12	;GRAY
	STA	$D026	;SPRITE MULTICOLOR #1

	LDA	#%00000000
	STA	$D017	;SPRITE Y-EXPANSION
	LDA	#40
	STA	$D002	;SPRITE 1 X (weapons display left)
	LDA	#64
	STA	$D003	;SPRITE 1 Y
	LDA	#64
	STA	$D004	;SPRITE 2 X (weapons display right)
	LDA	#64
	STA	$D005	;SPRITE 2 Y
	LDA	#40
	STA	$D006	;SPRITE 3 X (items display left)
	LDA	#120
	STA	$D007	;SPRITE 3 Y
	LDA	#64
	STA	$D008	;SPRITE 4 X (items display right)
	LDA	#120
	STA	$D009	;SPRITE 4 Y

	LDA	#144
	STA	$D00A	;SPRITE 5 X (Player char layer 1)
	LDA	#122
	STA	$D00B	;SPRITE 5 Y
	LDA	#144
	STA	$D00C	;SPRITE 6 X (Player char layer 2)
	LDA	#122
	STA	$D00D	;SPRITE 6 Y
	LDA	#144
	STA	$D00E	;SPRITE 6 X (Player char layer 3)
	LDA	#122
	STA	$D00F	;SPRITE 6 Y


	LDA	#%00011110
	STA	$D010	;MSB of all sprite X
	RTS

;This is technically part of a background routine, but it has to
;be here in the main code because the screen effects are unique
;to each system.
DEMATERIALIZE:
	INC	$D02C	;SPRITE COLOR 5
	INC	$D02D	;SPRITE COLOR 6
	INC	$D02E	;SPRITE COLOR 7
	LDX	UNIT
	INC	UNIT_TIMER_B,X
	LDA	UNIT_TIMER_B,X
	CMP	#64
	BEQ	DEMA1
	JMP	AILP
DEMA1:	;TRANSPORT COMPLETE
	;Return player sprite color to normal
	LDA	#06	;BLUE
	STA	$D02C	;SPRITE COLOR 5
	LDA	#14	;LIGHT BLUE
	STA	$D02D	;SPRITE COLOR 6
	LDA	#10	;ORANGE
	STA	$D02E	;SPRITE COLOR 7
	LDA	UNIT_B,X
	CMP	#1		;transport somewhere
	BEQ	DEMA2
	LDA	#2		;this means game over condition
	STA	UNIT_TYPE	;player type
	LDA	#7		;Normal transporter pad
	STA	UNIT_TYPE,X
	JMP	AILP
DEMA2:	LDA	#97
	STA	UNIT_TILE
	LDA	UNIT_C,X	;target X coordinates
	STA	UNIT_LOC_X
	LDA	UNIT_D,X	;target Y coordinates
	STA	UNIT_LOC_Y
	LDA	#7		;Normal transporter pad
	STA	UNIT_TYPE,X
	JSR	CACULATE_AND_REDRAW
	JMP	AILP

ANIMATE_PLAYER:
ANP1:	LDA	UNIT_TILE
	CMP	#97
	BNE	ANP2
	LDA	#96
	STA	UNIT_TILE
	RTS
ANP2:	LDA	#97
	STA	UNIT_TILE
	RTS
	RTS

START_LEVEL_MUSIC:
	LDY	SELECTED_MAP
	LDA	LEVEL_MUSIC,Y	;pick song
	JSR	$A000		;START MUSIC
	LDA	#1
	STA	MUSIC_STATE
	RTS

TOGGLE_MUSIC:
	LDA	USER_MUSIC_ON
	CMP	#1
	BNE	TGMUS1
	LDA	#5	;pick song
	JSR	$A000		;START MUSIC
	LDA	#<MSG_MUSICOFF
	STA	$FB
	LDA	#>MSG_MUSICOFF
	STA	$FC
	JSR	PRINT_INFO
	LDA	#0
	STA	USER_MUSIC_ON
	RTS
TGMUS1:	LDA	#<MSG_MUSICON
	STA	$FB
	LDA	#>MSG_MUSICON
	STA	$FC
	JSR	PRINT_INFO
	LDA	#1
	STA	USER_MUSIC_ON
	JMP	START_LEVEL_MUSIC
	

USER_MUSIC_ON:	!BYTE	1
LEVEL_MUSIC:	!BYTE	1,0,2,3,0,1,2,3,0,1,2,3,0,1

PLAY_SOUND:
	TAX
	LDY	SOUND_FX_H,X
	LDA	SOUND_FX_L,X
	LDX	#14	;channel 3
	JSR	$A006		;play sound effect
	RTS

SOUND_FX_L:	
	!BYTE <SOUND_EXPLOSION		; sound 00 explosion
	!BYTE <SOUND_EXPLOSION		; sound 01 explosion
	!BYTE <SOUND_MEDKIT		; sound 02 medkit
	!BYTE <SOUND_EMP		; sound 03 emp
	!BYTE <SOUND_MAGNET		; sound 04 magnet
	!BYTE <SOUND_SHOCK		; sound 05 electric shock
	!BYTE <SOUND_MOVEOBJ		; sound 06 move object
	!BYTE <SOUND_SHOCK		; sound 07 electric shock
	!BYTE <SOUND_PLASMA		; sound 08 plasma gun
	!BYTE <SOUND_PISTOL		; sound 09 fire pistol
	!BYTE <SOUND_ITEM_FOUND		; sound 10 item found
	!BYTE <SOUND_ERROR		; sound 11 error
	!BYTE <SOUND_CYCLE_WEAPON	; sound 12 change weapons
	!BYTE <SOUND_CYCLE_ITEM		; sound 13 change items
	!BYTE <SOUND_DOOR		; sound 14 door
	!BYTE <SOUND_MENU_BEEP		; sound 15 menu beep
	!BYTE <SOUND_MENU_BEEP		; sound 16 walk
	!BYTE <SOUND_BEEP		; sound 17 short beep
	!BYTE <SOUND_BEEP		; sound 18 short beep

SOUND_FX_H:	
	!BYTE >SOUND_EXPLOSION		; sound 00 explosion
	!BYTE >SOUND_EXPLOSION		; sound 01 explosion
	!BYTE >SOUND_MEDKIT		; sound 02 medkit
	!BYTE >SOUND_EMP		; sound 03 emp
	!BYTE >SOUND_MAGNET		; sound 04 magnet
	!BYTE >SOUND_SHOCK		; sound 05 electric shock
	!BYTE >SOUND_MOVEOBJ		; sound 06 move object
	!BYTE >SOUND_SHOCK		; sound 07 electric shock
	!BYTE >SOUND_PLASMA		; sound 08 plasma gun
	!BYTE >SOUND_PISTOL		; sound 09 fire pistol
	!BYTE >SOUND_ITEM_FOUND		; sound 10 item found
	!BYTE >SOUND_ERROR		; sound 11 error
	!BYTE >SOUND_CYCLE_WEAPON	; sound 12 change weapons
	!BYTE >SOUND_CYCLE_ITEM		; sound 13 change items
	!BYTE >SOUND_DOOR		; sound 14 door
	!BYTE >SOUND_MENU_BEEP		; sound 15 menu beep
	!BYTE >SOUND_MENU_BEEP		; sound 16 walk
	!BYTE >SOUND_BEEP		; sound 17 short beep
	!BYTE >SOUND_BEEP		; sound 18 short beep

DISPLAY_MAP:
	LDA	#0
	STA	SCREEN_SHAKE
	LDA	#%00000000	;disable ALL sprites
	STA	$D015
	LDA	#01	;WHITE
	STA	CS02+1
	JSR	CS02	;set monochrome screen for now.
	LDA	#05	;GREEN
	STA	CS02+1
	;SET SOURCE
	LDA	#<MAPSCREEN_TEXT
	STA	$FB
	LDA	#>MAPSCREEN_TEXT
	STA	$FC
	;SET DESTINATION
	LDA	#$00
	STA	$FD
	LDA	#$E0
	STA	$FE
	;SET END
	LDA	#$E3
	STA	DGS5+1
	LDA	#$E7
	STA	DGS6+1
	JSR	DECOMPRESS_SCREEN
	JSR	DISPLAY_STATS
	JSR	CLEAR_KEY_BUFFER
	JSR	CLEAR_SNES_PAD
	JMP	BLINK_PLAYER

MAP_RENDER:
	LDA	#0
	STA	MAP_X
	STA	MAP_Y

	LDA	#%10001110	;SCREEN RAM AT $E000, CHARSET AT $F000
	STA	$D018		;SAVE TO VIC-II
	JSR	MAP_CLEAR

	LDA	#0
	STA	$D418	;	volume to zero

	SEI
	LDA	#%00110100	
	STA	$0001	;DISABLE BASIC ROM AND KERNAL ROM
	;-----------
	LDA	#00
	STA	DSMP1+1
	LDA	#$60
	STA	DSMP1+2

DSMP1:	LDY	$6000 			;SELF MODIFYING CODE USED HERE.
	LDA	TILE_ATTRIB,Y
	AND	#%00000001		;CAN WE WALK ON IT?
	CMP	#%00000001		;for something to move onto it?
	BEQ	DSMP2
	JSR	BIT_PLOT_ON
DSMP2:	INC	DSMP1+1
	BNE	DSMP3
	INC	DSMP1+2
DSMP3:	INC	MAP_X
	LDA	MAP_X
	CMP	#128
	BNE	DSMP1
	LDA	#00
	STA	MAP_X
	INC	MAP_Y
	LDA	MAP_Y
	CMP	#64
	BNE	DSMP1
	;--------------
	LDA	#%00110110	
	STA	$0001	;DISABLE BASIC ROM ONLY
	CLI

	LDA	#15
	STA	$D418	;	volume restored
	RTS


BLINK_PLAYER:
	JSR	MAP_RENDER
	LDA	UNIT_LOC_X
	STA	MAP_X
	LDA	UNIT_LOC_Y
	STA	MAP_Y
BP_WAIT:
	LDA	SPRITECOLSTATE	
	CMP	#0
	BNE	MWT1
	LDA	#%00110100	
	JSR	TURN_DOT_OFF
	JMP	MWT2
MWT1:	CMP	#3
	BNE	MWT2
	JSR	TURN_DOT_ON
MWT2:	JSR	SNES_CONTROLER_READ
	LDA	NEW_B
	CMP	#0
	BEQ	MWT3
	JMP	RETURN_TO_GAME
MWT3:	LDA	NEW_A
	CMP	#0
	BEQ	MWT4
	LDA	#0
	STA	NEW_A
	JMP	BLINK_ROBOTS
MWT4:	JSR	$F142
	CMP	#$00
	BEQ	BP_WAIT
	CMP	#136	;F7
	BNE	MWT10
	JMP	BLINK_ROBOTS
MWT10:	JMP	RETURN_TO_GAME

BLINK_ROBOTS:
	JSR	MAP_RENDER
BLRB0:	LDA	SPRITECOLSTATE	
	CMP	#0
	BNE	BLRB1
	JSR	BLINK_ROBOTS_ON
	JMP	BLRB5
BLRB1:	CMP	#3
	BNE	BLRB5
	JSR	BLINK_ROBOTS_OFF
BLRB5:	JSR	SNES_CONTROLER_READ
	LDA	NEW_B
	CMP	#0
	BEQ	BLRB7
	JMP	RETURN_TO_GAME
BLRB7:	LDA	NEW_A
	CMP	#0
	BEQ	BLRB8
	LDA	#0
	STA	NEW_A
	JMP	BLINK_PLAYER	
BLRB8:	JSR	$F142
	CMP	#$00
	BEQ	BLRB0
	CMP	#136	;F7
	BNE	BLRB6
	JMP	BLINK_PLAYER
BLRB6:	JMP	RETURN_TO_GAME

BLINK_ROBOTS_ON:
	LDA	#1	;FIRST POSSIBLE ROBOT
	STA	UNIT
BLR01:	LDX 	UNIT
	LDA	UNIT_TYPE,X
	CMP	#0	;DOES IT EXIST?
	BNE	BLR02
BLR03:	INC	UNIT
	LDA	UNIT
	CMP	#28	;LAST POSSIBLE ROBOT
	BNE	BLR01
	RTS
BLR02:	LDX	UNIT
	LDA	UNIT_LOC_X,X
	STA	MAP_X
	LDA	UNIT_LOC_Y,X
	STA	MAP_Y	
	JSR	TURN_DOT_ON
	JMP	BLR03
	RTS

BLINK_ROBOTS_OFF:
	LDA	#1	;FIRST POSSIBLE ROBOT
	STA	UNIT
BLR05:	LDX 	UNIT
	LDA	UNIT_TYPE,X
	CMP	#0	;DOES IT EXIST?
	BNE	BLR07
BLR06:	INC	UNIT
	LDA	UNIT
	CMP	#28	;LAST POSSIBLE ROBOT
	BNE	BLR05
	RTS
BLR07:	LDX	UNIT
	LDA	UNIT_LOC_X,X
	STA	MAP_X
	LDA	UNIT_LOC_Y,X
	STA	MAP_Y	
	JSR	TURN_DOT_OFF
	JMP	BLR06
	RTS

TURN_DOT_ON:
	SEI
	LDA	#%00110100	
	STA	$0001	;DISABLE BASIC ROM AND KERNAL ROM
	JSR	BIT_PLOT_ON
	INC	MAP_X
	JSR	BIT_PLOT_ON
	INC	MAP_Y
	JSR	BIT_PLOT_ON
	DEC 	MAP_X
	JSR	BIT_PLOT_ON
	DEC 	MAP_Y
	LDA	#%00110110	
	STA	$0001	;DISABLE BASIC ROM ONLY
	CLI
	RTS

TURN_DOT_OFF:
	SEI
	LDA	#%00110100	
	STA	$0001	;DISABLE BASIC ROM AND KERNAL ROM
	JSR	BIT_PLOT_OFF
	INC	MAP_X
	JSR	BIT_PLOT_OFF
	INC	MAP_Y
	JSR	BIT_PLOT_OFF
	DEC 	MAP_X
	JSR	BIT_PLOT_OFF
	DEC 	MAP_Y
	LDA	#%00110110	
	STA	$0001	;DISABLE BASIC ROM ONLY
	CLI	
	RTS
	
RETURN_TO_GAME:
	LDA	#%10001100	;SCREEN RAM AT $E000, CHARSET AT $F000
	STA	$D018		;SAVE TO VIC-II
	JSR	DISPLAY_GAME_SCREEN
	JSR	DRAW_MAP_WINDOW	
	JSR	DISPLAY_PLAYER_HEALTH
	JSR	DISPLAY_KEYS
	JSR	DISPLAY_WEAPON
	JSR	DISPLAY_ITEM
	JSR	DISPLAY_PLAYER_SPRITE
	JSR	CLEAR_KEY_BUFFER
	JSR	CLEAR_SNES_PAD
	RTS

BIT_PLOT_OFF:	
	JSR	BIT_FIND_XY
	LDY	#0
	LDA	($FD),Y	
	AND	BIT_CHART_OFF,X
	STA	($FD),Y
	RTS
BIT_PLOT_ON:
	JSR	BIT_FIND_XY
	LDY	#0
	LDA	($FD),Y	
	ORA	BIT_CHART_ON,X
	STA	($FD),Y
	RTS

BIT_FIND_XY:
	LDA	MAP_Y
	STA	$FD
	LDA	#$FC
	STA	$FE
	LDA	MAP_X
	LSR
	LSR
	LSR
	LSR
	LSR
	CLC
	ADC	$FE
	STA	$FE
	LDA	MAP_X
	AND	#%00011000
	ASL
	ASL
	ASL
	CLC
	ADC	$FD
	STA	$FD
	LDA	MAP_X
	AND	#%00000111
	TAX
	RTS
	
BIT_CHART_ON:
	!BYTE	%10000000
	!BYTE	%01000000
	!BYTE	%00100000
	!BYTE	%00010000
	!BYTE	%00001000
	!BYTE	%00000100
	!BYTE	%00000010
	!BYTE	%00000001
BIT_CHART_OFF:
	!BYTE	%01111111
	!BYTE	%10111111
	!BYTE	%11011111
	!BYTE	%11101111
	!BYTE	%11110111
	!BYTE	%11111011
	!BYTE	%11111101
	!BYTE	%11111110

MAP_CLEAR:
	LDA	#$00
	STA	$FD
	LDA	#$FC
	STA	$FE
	LDA	#0
	LDY	#0
MCL1:	STA	($FD),Y
	INY
	CPY	#0
	BNE	MCL1
	INC	$FE
	LDX	$FE
	CPX	#0
	BNE	MCL1
	RTS

	

;$D800 - $DBE7	COLOR RAM
;$E000 - $E3E7	SCREEN RAM
;$E3F8		SPRITE POINTER	sprite #0 (tile/elevator cursor)
;$E3F9		SPRITE POINTER	sprite #1 (weapon left)
;$E3FA		SPRITE POINTER	sprite #2 (weapon right)
;$E3FB		SPRITE POINTER	sprite #3 (item left)
;$E3FC		SPRITE POINTER	sprite #4 (item right)
;$E3FD		SPRITE POINTER	sprite #5 (player layer 1)
;$E3FE		SPRITE POINTER	sprite #6 (player layer 2)
;$E3FF		SPRITE POINTER	sprite #7 (player layer 3)

;SPRITE POINTER LOCATIONS:
;$90 = $E400	TILE CURSOR
;$91 = $E440	ELEVATOR CURSOR
;$92 = $E480	MEDKIT LEFT
;$93 = $E4C0	MEDKIT RIGHT
;$94 = $E500	TIMEBOMB LEFT
;$95 = $E540	TIMEBOMB RIGHT
;$96 = $E580	EMP LEFT
;$97 = $E5C0	EMP RIGHT
;$98 = $E600	MAGNET LEFT
;$99 = $E640	MAGNET RIGHT
;$9A = $E680	PISTOL LEFT
;$9B = $E6C0	PISTOL RIGHT
;$9C = $E700	PLASMA GUN LEFT
;$9D = $E740	PLASMA GUN RIGHT
;$9E = $E780	PLAYER UP ANIM1 LAYER 1
;$9F = $E7C0	PLAYER UP ANIM1 LAYER 2
;$A0 = $E800	PLAYER UP ANIM1 LAYER 3  
;$A1 = $E840	PLAYER UP ANIM2 LAYER 1
;$A2 = $E880	PLAYER UP ANIM2 LAYER 2
;$A3 = $E8C0	PLAYER UP ANIM2 LAYER 3
;$A4 = $E900	PLAYER DOWN ANIM1 LAYER 1
;$A5 = $E940	PLAYER DOWN ANIM1 LAYER 2
;$A6 = $E980	PLAYER DOWN ANIM1 LAYER 3
;$A7 = $E9C0	PLAYER DOWN ANIM2 LAYER 1
;$A8 = $EA00	PLAYER DOWN ANIM2 LAYER 2
;$A9 = $EA40	PLAYER DOWN ANIM2 LAYER 3
;$AA = $EA80	PLAYER LEFT ANIM1 LAYER 1
;$AB = $EAC0	PLAYER LEFT ANIM1 LAYER 2
;$AC = $EB00	PLAYER LEFT ANIM1 LAYER 3
;$AD = $EB40	PLAYER LEFT ANIM2 LAYER 1
;$AE = $EB80	PLAYER LEFT ANIM2 LAYER 2
;$AF = $EBC0	PLAYER LEFT ANIM2 LAYER 3
;$B0 = $EC00	PLAYER RIGHT ANIM1 LAYER 1
;$B1 = $EC40	PLAYER RIGHT ANIM1 LAYER 2
;$B2 = $EC80	PLAYER RIGHT ANIM1 LAYER 3
;$B3 = $ECC0	PLAYER RIGHT ANIM2 LAYER 1
;$B4 = $ED00	PLAYER RIGHT ANIM2 LAYER 2
;$B5 = $ED40	PLAYER RIGHT ANIM2 LAYER 3
;$B6 = $ED80	PLAYER DEAD LAYER 1
;$B7 = $EDC0	PLAYER DEAD LAYER 2
;$B8 = $EE00	PLAYER DEAD LAYER 3
;$B9 = $EE40	CURSOR - MAGNIFYING GLASS
;$BA = $EE80	CURSOR - HAND

;$F000 - $F800	Character set

;SPRITES ARE FULLY VISIBLE STARTING AT X=24 Y=50

!SOURCE "BACKGROUND_TASKS.ASM"

;These are the included binary files that contain the screen
;image for the main editor.
INTRO_TEXT:
	!BYTE	$60,$20,$02,$4e,$60,$63,$0a,$4e,$65,$60,$20,$05,$e9,$ce,$20,$20,$e9,$ce,$60,$20
	!BYTE	$0d,$cd,$60,$a0,$09,$ce,$20,$65,$60,$20,$05,$66,$a0,$20,$20,$66,$a0,$60,$20,$0d
	!BYTE	$a0,$13,$14,$01,$12,$14,$20,$07,$01,$0d,$05,$a0,$20,$65,$60,$20,$04,$e9,$66,$ce
	!BYTE	$a0,$a0,$66,$ce,$ce,$60,$20,$0c,$a0,$13,$05,$0c,$05,$03,$14,$20,$0d,$01,$10,$a0
	!BYTE	$20,$65,$60,$20,$03,$e9,$a0,$e3,$60,$a0,$02,$e3,$60,$ce,$02,$60,$20,$0b,$a0,$04
	!BYTE	$09,$06,$06,$09,$03,$15,$0c,$14,$19,$a0,$20,$65,$60,$20,$02,$e9,$60,$66,$06,$ce
	!BYTE	$ce,$a0,$60,$20,$0b,$a0,$03,$0f,$0e,$14,$12,$0f,$0c,$13,$20,$20,$a0,$20,$65,$60
	!BYTE	$20,$02,$66,$3a,$4d,$60,$3a,$02,$4e,$3a,$66,$a0,$a0,$60,$20,$02,$e9,$ce,$20,$20
	!BYTE	$e9,$ce,$60,$20,$02,$ce,$60,$a0,$09,$cd,$4e,$60,$20,$03,$66,$55,$43,$4d,$3a,$4e
	!BYTE	$43,$49,$66,$a0,$a0,$60,$20,$02,$66,$a0,$20,$20,$66,$a0,$60,$20,$13,$66,$42,$51
	!BYTE	$48,$3a,$42,$51,$48,$66,$a0,$69,$60,$20,$02,$66,$a0,$20,$20,$66,$a0,$60,$20,$02
	!BYTE	$70,$60,$40,$02,$73,$0d,$01,$10,$6b,$60,$40,$02,$6e,$60,$20,$03,$66,$4a,$46,$4b
	!BYTE	$3a,$4a,$46,$4b,$66,$ce,$60,$20,$03,$66,$ce,$a0,$a0,$66,$a0,$20,$20,$0b,$09,$0c
	!BYTE	$0c,$20,$01,$0c,$0c,$20,$08,$15,$0d,$01,$0e,$13,$60,$20,$03,$60,$66,$06,$a0,$a0
	!BYTE	$60,$20,$03,$60,$66,$04,$69,$60,$20,$14,$66,$60,$d0,$04,$66,$a0,$a0,$60,$20,$05
	!BYTE	$66,$a0,$20,$20,$60,$43,$14,$66,$60,$d0,$04,$66,$a0,$69,$60,$43,$05,$66,$a0,$43
	!BYTE	$43,$60,$3a,$14,$60,$66,$06,$ce,$a0,$a0,$ce,$60,$3a,$03,$66,$a0,$60,$3a,$16,$e9
	!BYTE	$a0,$a0,$e7,$d0,$ce,$60,$a0,$02,$ce,$a0,$60,$3a,$03,$66,$a0,$60,$3a,$15,$e9,$60
	!BYTE	$a0,$03,$e3,$60,$a0,$02,$ce,$a0,$a0,$60,$3a,$03,$66,$a0,$60,$3a,$0b,$e9,$ce,$df
	!BYTE	$60,$3a,$06,$60,$66,$08,$d5,$c0,$c9,$60,$3a,$03,$66,$ce,$df,$60,$3a,$09,$e9,$e3
	!BYTE	$cd,$ce,$60,$a0,$06,$66,$51,$60,$66,$04,$51,$66,$dd,$ce,$e3,$60,$a0,$02,$ce,$a0
	!BYTE	$cd,$ce,$60,$3a,$09,$a0,$d1,$e7,$60,$66,$10,$dd,$60,$66,$04,$a0,$d1,$e7,$69,$60
	!BYTE	$3a,$09,$5f,$a0,$ce,$60,$3a,$07,$60,$66,$08,$ca,$c0,$cb,$60,$3a,$02,$5f,$e4,$69
	!BYTE	$60,$3a,$0b,$66,$a0,$3a,$e9,$a0,$a0,$ce,$3a,$e9,$a0,$a0,$ce,$e9,$a0,$a0,$ce,$66
	!BYTE	$e9,$a0,$a0,$ce,$e9,$a0,$a0,$ce,$e9,$a0,$a0,$ce,$60,$3a,$0a,$66,$a0,$3a,$60,$66
	!BYTE	$02,$ce,$ce,$60,$66,$02,$a0,$60,$66,$02,$ce,$ce,$60,$66,$02,$a0,$60,$66,$02,$69
	!BYTE	$60,$66,$02,$69,$60,$3a,$0a,$66,$a0,$3a,$66,$ce,$a0,$66,$ce,$66,$a0,$66,$a0,$66
	!BYTE	$ce,$a0,$66,$ce,$66,$a0,$66,$a0,$3a,$66,$a0,$3a,$66,$ce,$a0,$ce,$60,$3a,$0a,$66
	!BYTE	$a0,$3a,$60,$66,$02,$ce,$ce,$66,$a0,$66,$a0,$60,$66,$02,$ce,$ce,$66,$a0,$66,$a0
	!BYTE	$3a,$66,$a0,$3a,$60,$66,$02,$a0,$60,$3a,$0a,$66,$a0,$3a,$66,$a0,$3a,$66,$a0,$66
	!BYTE	$ce,$66,$a0,$66,$ce,$a0,$66,$69,$66,$ce,$66,$a0,$3a,$66,$a0,$3a,$e9,$a0,$66,$a0
	!BYTE	$60,$3a,$0a,$66,$a0,$3a,$66,$69,$3a,$66,$69,$60,$66,$02,$69,$60,$66,$02,$69,$3a
	!BYTE	$60,$66,$02,$69,$3a,$66,$69,$3a,$60,$66,$02,$69,$3a

INTRO_COLOR:
	!BYTE	$60, $01, $02, $60, $0B, $0D, $60, $01, $05, $0C, $0C, $01, $01, $0C, $0C
	!BYTE	$60, $01, $0D, $60, $0B, $0D, $60, $01, $04, $0C, $02, $0C, $01, $01, $02
	!BYTE	$0C, $60, $01, $0D, $0B, $60, $05, $09, $0B, $01, $0B, $60, $01, $04, $0C
	!BYTE	$02, $60, $0C, $02, $02, $0C, $0C, $60, $01, $0C, $0B, $60, $05, $09, $0B
	!BYTE	$01, $0B, $60, $01, $03, $60, $0C, $09, $60, $01, $0B, $0B, $60, $05, $09
	!BYTE	$0B, $01, $0B, $60, $01, $02, $0C, $60, $02, $06, $60, $0C, $02, $60, $01
	!BYTE	$0B, $0B, $60, $05, $09, $60, $0B, $02, $60, $01, $02, $02, $02, $01, $60
	!BYTE	$02, $02, $01, $02, $02, $0C, $0C, $60, $01, $02, $0C, $0C, $01, $01, $0C
	!BYTE	$0C, $60, $01, $02, $60, $0B, $0C, $60, $01, $03, $02, $60, $01, $02, $02
	!BYTE	$60, $01, $02, $02, $0C, $0C, $60, $01, $02, $02, $0C, $01, $01, $02, $0C
	!BYTE	$60, $01, $13, $02, $01, $02, $01, $02, $01, $02, $01, $02, $0C, $0C, $60
	!BYTE	$01, $02, $02, $0C, $01, $0C, $02, $0C, $60, $01, $13, $02, $60, $01, $02
	!BYTE	$02, $60, $01, $02, $02, $0C, $0C, $60, $01, $02, $02, $60, $0C, $02, $02
	!BYTE	$0C, $60, $05, $13, $01, $60, $02, $06, $0C, $0C, $60, $01, $03, $60, $02
	!BYTE	$04, $0C, $60, $01, $14, $02, $60, $01, $04, $02, $0C, $0C, $60, $01, $05
	!BYTE	$02, $0C, $01, $01, $60, $06, $14, $02, $60, $01, $04, $02, $0C, $0C, $60
	!BYTE	$06, $05, $02, $0C, $60, $06, $16, $60, $02, $06, $60, $0C, $03, $60, $06
	!BYTE	$03, $02, $0C, $60, $06, $16, $60, $0C, $03, $08, $60, $0C, $05, $60, $06
	!BYTE	$03, $02, $0C, $60, $06, $15, $60, $0C, $0B, $60, $06, $03, $02, $0C, $60
	!BYTE	$06, $0B, $60, $0C, $02, $60, $06, $06, $60, $02, $08, $60, $0C, $02, $60
	!BYTE	$06, $03, $02, $0C, $0C, $60, $06, $09, $60, $0C, $0A, $02, $01, $60, $02
	!BYTE	$04, $01, $02, $60, $0C, $09, $60, $06, $09, $60, $0C, $02, $60, $02, $10
	!BYTE	$0C, $60, $02, $04, $60, $0C, $03, $60, $06, $09, $60, $0C, $02, $60, $06
	!BYTE	$07, $60, $02, $08, $60, $0C, $02, $60, $06, $02, $60, $0C, $02, $60, $06
	!BYTE	$0B, $02, $0C, $60, $06, $0D, $02, $60, $06, $16, $02, $0C, $06, $60, $01
	!BYTE	$02, $06, $06, $60, $01, $02, $06, $60, $01, $02, $06, $06, $60, $01, $02
	!BYTE	$06, $60, $01, $02, $06, $60, $01, $02, $60, $06, $0B, $02, $0C, $06, $01
	!BYTE	$06, $06, $01, $06, $01, $06, $01, $06, $01, $06, $06, $01, $06, $01, $06
	!BYTE	$01, $06, $06, $01, $06, $06, $01, $60, $06, $0D, $02, $0C, $06, $60, $01
	!BYTE	$02, $06, $06, $01, $06, $01, $06, $60, $01, $02, $06, $06, $01, $06, $01
	!BYTE	$06, $06, $01, $06, $06, $60, $01, $02, $60, $06, $0B, $02, $0C, $06, $01, $06
	!BYTE	$06, $01, $06, $01, $06, $01, $06, $01, $06, $06, $01, $06, $01, $06, $01
	!BYTE	$06, $06, $01, $06, $06, $06, $06, $01, $60, $06, $0B, $02, $0C, $06, $01
	!BYTE	$06, $06, $01, $06, $60, $01, $02, $06, $60, $01, $02, $06, $06, $60, $01
	!BYTE	$02, $06, $06, $01, $06 ,$06, $60, $01, $02, $06, $06

SCR_TEXT:
	!BYTE	$60,$20,$20,$5d,$17,$05,$01,$10,$0f,$0e,$60,$20,$20,$5d,$60,$20,$26,$5d,$60,$20
	!BYTE	$26,$5d,$60,$20,$26,$5d,$60,$20,$26,$5d,$60,$20,$26,$6b,$60,$40,$05,$60,$20,$20
	!BYTE	$5d,$20,$09,$14,$05,$0d,$60,$20,$21,$5d,$60,$20,$26,$5d,$60,$20,$26,$5d,$60,$20
	!BYTE	$26,$5d,$60,$20,$26,$5d,$60,$20,$26,$6b,$60,$40,$05,$60,$20,$20,$5d,$20,$0b,$05
	!BYTE	$19,$13,$60,$20,$21,$5d,$60,$20,$26,$5d,$60,$20,$26,$6b,$60,$40,$05,$60,$20,$20
	!BYTE	$5d,$60,$20,$26,$5d,$60,$20,$26,$5d,$60,$20,$05,$73,$09,$0e,$06,$0f,$12,$0d,$01
	!BYTE	$14,$09,$0f,$0e,$6b,$60,$40,$13,$5b,$60,$40,$05,$60,$20,$20,$5d,$08,$05,$01,$0c
	!BYTE	$14,$08,$60,$20,$20,$5d,$60,$20,$26,$5d,$60,$71,$05
SCR_COLOR:
	!BYTE	$60, $F1, $20, $FE, $60, $F1, $26, $FE, $60, $F1, $26, $FE, $60, $F1, $26
	!BYTE	$FE, $60, $F1, $26, $FE, $60, $F1, $26, $FE, $60, $F1, $26, $60, $FE, $06
	!BYTE	$60, $F1, $20, $FE, $60, $F1, $26, $FE, $60, $F1, $26, $FE, $60, $F1, $26
	!BYTE	$FE, $60, $F1, $26, $FE, $60, $F1, $26, $FE, $60, $F1, $26, $60, $FE, $06
	!BYTE	$60, $F1, $20, $FE, $60, $F1, $26, $FE, $FA, $FA, $FD, $FD, $FE, $FE, $60
	!BYTE	$F1, $20, $FE, $FA, $FA, $FD, $FD, $FE, $FE, $60, $F1, $20, $60, $FE, $06
	!BYTE	$60, $F1, $20, $FE, $60, $F1, $26, $FE, $60, $F1, $26, $FE, $60, $F1, $05
	!BYTE	$FE, $60, $F1, $0A, $60, $FE, $1B, $60, $F5, $20, $FE, $60, $F1, $05, $60
	!BYTE	$F5, $20, $FE, $60, $F1, $05, $60, $F5, $20, $FE, $F2, $F2, $F8, $F8, $F5
	!BYTE	$F5

SCR_ENDGAME:
	!BYTE	$55, $60, $40, $03, $73, $01, $14, $14, $01, $03, $0B, $20, $0F, $06, $20
	!BYTE	$14, $08, $05, $20, $10, $05, $14, $13, $03, $09, $09, $20, $12, $0F, $02
	!BYTE	$0F, $14, $13, $6B, $60, $40, $03, $49	;FIRST LINE
	!BYTE	$5D,$60, $20, $25, $5D	;BLANK LINE
	!BYTE	$5D,$60, $20, $25, $5D	;BLANK LINE
	!BYTE	$5D,$60, $20, $25, $5D	;BLANK LINE
	!BYTE	$5D,$60, $20, $25, $5D	;BLANK LINE
	!BYTE	$5D, $60, $20, $25, $5D, $5D, $60
	!BYTE	$20, $25, $5D, $5D, $60, $20, $25, $5D, $5D, $60, $20, $25, $5D, $5D, $60
	!BYTE	$20, $25, $5D, $5D, $60, $20, $25, $5D, $5D, $60, $20, $0A, $13, $03, $05
	!BYTE	$0E, $01, $12, $09, $0F, $3A, $60, $20, $11, $5D, $5D, $60, $20, $25, $5D
	!BYTE	$5D, $60, $20, $06, $05, $0C, $01, $10, $13, $05, $04, $20, $14, $09, $0D
	!BYTE	$05, $3A, $60, $20, $11, $5D, $5D, $60, $20, $25, $5D, $5D, $60, $20, $02
	!BYTE	$12, $0F, $02, $0F, $14, $13, $20, $12, $05, $0D, $01, $09, $0E, $09, $0E
	!BYTE	$07, $3A, $60, $20, $11, $5D, $5D, $60, $20, $25, $5D, $5D, $20, $20, $13
	!BYTE	$05, $03, $12, $05, $14, $13, $20, $12, $05, $0D, $01, $09, $0E, $09, $0E
	!BYTE	$07, $3A, $60, $20, $11, $5D, $5D, $60, $20, $25, $5D, $5D, $60, $20, $08
	!BYTE	$04, $09, $06, $06, $09, $03, $15, $0C, $14, $19, $3A, $60, $20, $11, $5D
	!BYTE	$5D, $60, $20, $25, $5D, $5D, $60, $20, $25, $5D, $5D, $60, $20, $25, $5D
	!BYTE	$5D, $60, $20, $25, $5D
	!BYTE	$4A, $60, $40, $25, $4B

SCR_CUSTOM_KEYS:
	!BYTE	$55, $60, $40, $03, $73, $01, $14, $14, $01, $03, $0B, $20, $0F, $06, $20
	!BYTE	$14, $08, $05, $20, $10, $05, $14, $13, $03, $09, $09, $20, $12, $0F, $02
	!BYTE	$0F, $14, $13, $6B, $60, $40, $03, $49, $5D, $60, $20, $25, $5D, $5D, $60
	!BYTE	$20, $25, $5D, $5D, $60, $20, $03, $10, $12, $05, $13, $13, $20, $14, $08
	!BYTE	$05, $20, $0B, $05, $19, $13, $20, $19, $0F, $15, $20, $17, $09, $13, $08
	!BYTE	$20, $14, $0F, $20, $15, $13, $05, $60, $20, $03, $5D, $5D, $60, $20, $04
	!BYTE	$06, $0F, $12, $20, $14, $08, $05, $20, $06, $0F, $0C, $0C, $0F, $17, $09
	!BYTE	$0E, $07, $20, $06, $15, $0E, $03, $14, $09, $0F, $0E, $13, $60, $20, $05
	!BYTE	$5D, $5D, $60, $20, $25, $5D, $5D, $60, $20, $25, $5D, $5D, $60, $20, $25
	!BYTE	$5D, $5D, $60, $20, $06, $0D, $0F, $16, $05, $20, $15, $10, $3A, $60, $20
	!BYTE	$16, $5D, $5D, $60, $20, $04, $0D, $0F, $16, $05, $20, $04, $0F, $17, $0E
	!BYTE	$3A, $60, $20, $16, $5D, $5D, $60, $20, $04, $0D, $0F, $16, $05, $20, $0C
	!BYTE	$05, $06, $14, $3A, $60, $20, $16, $5D, $5D, $60, $20, $03, $0D, $0F, $16
	!BYTE	$05, $20, $12, $09, $07, $08, $14, $3A, $60, $20, $16, $5D, $5D, $60, $20
	!BYTE	$06, $06, $09, $12, $05, $20, $15, $10, $3A, $60, $20, $16, $5D, $5D, $60
	!BYTE	$20, $04, $06, $09, $12, $05, $20, $04, $0F, $17, $0E, $3A, $60, $20, $16
	!BYTE	$5D, $5D, $60, $20, $04, $06, $09, $12, $05, $20, $0C, $05, $06, $14, $3A
	!BYTE	$60, $20, $16, $5D, $5D, $60, $20, $03, $06, $09, $12, $05, $20, $12, $09
	!BYTE	$07, $08, $14, $3A, $60, $20, $16, $5D, $5D, $20, $03, $19, $03, $0C, $05
	!BYTE	$20, $17, $05, $01, $10, $0F, $0E, $13, $3A, $60, $20, $16, $5D, $5D, $60
	!BYTE	$20, $02, $03, $19, $03, $0C, $05, $20, $09, $14, $05, $0D, $13, $3A, $60
	!BYTE	$20, $16, $5D, $5D, $60, $20, $05, $15, $13, $05, $20, $09, $14, $05, $0D
	!BYTE	$3A, $60, $20, $16, $5D, $5D, $20, $13, $05, $01, $12, $03, $08, $20, $0F
	!BYTE	$02, $0A, $05, $03, $14, $3A, $60, $20, $16, $5D, $5D, $60, $20, $02, $0D
	!BYTE	$0F, $16, $05, $20, $0F, $02, $0A, $05, $03, $14, $3A, $60, $20, $16, $5D
	!BYTE	$5D, $60, $20, $25, $5D, $5D, $60, $20, $25, $5D, $5D, $60, $20, $25, $5D
	!BYTE	$4A, $60, $40, $25, $4B

MAPSCREEN_TEXT:
	!BYTE	$60, $20,$05,$01, $14, $14, $01, $03, $0B, $20, $0F, $06, $20
	!BYTE	$14, $08, $05, $20, $10, $05, $14, $13, $03, $09, $09, $20, $12, $0F, $02
	!BYTE 	$0F, $14, $13,96,32,57	;TOP TEXT
	!BYTE	128,136,144,152,160,168,176,184,192,200,208,216,224,232,240,248,96,32,23 ;MAP
	!BYTE	129,137,145,153,161,169,177,185,193,201,209,217,225,233,241,249,96,32,23 ;MAP
	!BYTE	130,138,146,154,162,170,178,186,194,202,210,218,226,234,242,250,96,32,23 ;MAP
	!BYTE	131,139,147,155,163,171,179,187,195,203,211,219,227,235,243,251,96,32,23 ;MAP
	!BYTE	132,140,148,156,164,172,180,188,196,204,212,220,228,236,244,252,96,32,23 ;MAP
	!BYTE	133,141,149,157,165,173,181,189,197,205,213,221,229,237,245,253,96,32,23 ;MAP
	!BYTE	134,142,150,158,166,174,182,190,198,206,214,222,230,238,246,254,96,32,23 ;MAP
	!BYTE	135,143,151,159,167,175,183,191,199,207,215,223,231,239,247,255,96,32,63 ;MAP
	!BYTE	19,3,5,14,1,18,9,15,58,96,32,66	;SCENARIO
	!BYTE	5,12,1,16,19,5,4,32,20,9,13,5,58,96,32,62	;ELAPSED TIME
	!BYTE	18,15,2,15,20,19,32,18,5,13,1,9,14,9,14,7,58,96,32,61	;ROBOTSS REMAINING
	!BYTE	19,5,3,18,5,20,19,32,18,5,13,1,9,14,9,14,7,58,96,32,68	;SECRETS REMAINING
	!BYTE	4,9,6,6,9,3,21,12,20,25,58			;DIFFICULTY
	!BYTE	96,32,186
	!BYTE	6,55,32,20,15,7,7,12,5,19,32,18,15,2,15,20,19,47,16,12,1,25,5,18 ;F7 TOGGLES
	!BYTE	96,32,7
	
CINEMA_MESSAGE:
	!SCR"coming soon: space balls 2 - the search for more money, "
	!SCR"attack of the paperclips: clippy's revenge, "
	!SCR"it came from planet earth, "
	!SCR"rocky 5000, all my circuits the movie, "
	!SCR"conan the librarian, and more! " 

SOUND_MENU_BEEP:
	!BYTE	$05,$58,$08,$B5,$41,$BA,$40,$00
SOUND_DOOR:
	!BYTE	$05,$59,$00,$B4,$81,$B5,$80,$B6,$B7,$B8,$B9,$BA,$BB,$BC,$BD,$BE
   	!BYTE	$C2,$C4,$C6,$C8,$CA,$CC,$CD,$00
SOUND_CYCLE_ITEM:	
	!BYTE	$05,$58,$08,$B0,$41,$B7,$40,$BC,$00
SOUND_ERROR:
	!BYTE	$05,$58,$09,$90,$41,$B0,$40,$B2,$90,$B0,$B2,$90,$B0,$B2,$90,$B0
	!BYTE	$B2,$90,$B0,$B2,$00
SOUND_CYCLE_WEAPON:
	!BYTE	$05,$58,$00,$B0,$21,$B7,$20,$BC,$00
SOUND_ITEM_FOUND:
	!BYTE	$0A,$00,$02,$A0,$41,$A0,$A0,$A4,$A4,$A4,$A7,$A7,$A7,$A0,$A0,$A0
	!BYTE	$A4,$A4,$A4,$A7,$A7,$A7,$A0,$A0,$A0,$A4,$A4,$A4,$A7,$A7,$A7,$A0
	!BYTE	$A0,$A0,$A4,$A4,$A4,$A7,$A7,$A7,$00
SOUND_BEEP:	
        !BYTE	$05,$55,$08,$C0,$41,$C0,$40,$00
SOUND_PISTOL:
	;!BYTE	$85,$55,$00,$D0,$81,$B7,$80,$BC
	!BYTE	$00,$F9,$08,$C4,$81,$A8,$41,$C0,$81,$BE,$BC,$80,$BA,$B8,$B6,$B4
        !BYTE	$B2,$B0,$AE,$AC,$AA,$A8,$A6,$A4,$A2,$A0,$9E,$9C,$9A,$98,$96,$94
        !BYTE	$92,$90,$00
SOUND_PLASMA:
        !BYTE	$05,$5A,$08,$AA,$41,$AA,$80,$AD,$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA
        !BYTE	$41,$AA,$80,$AD,$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA,$41,$AA,$80,$AD
        !BYTE	$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA,$41,$AA,$80,$AD,$40,$AF,$B1,$B3
        !BYTE	$B6,$B7,$B9,$AA,$41,$AA,$80,$AD,$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA
        !BYTE	$41,$AA,$80,$AD,$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA,$41,$AA,$80,$AD
        !BYTE	$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA,$41,$AA,$80,$AD,$40,$AF,$B1,$B3
        !BYTE	$B6,$B7,$B9,$AA,$41,$AA,$80,$AD,$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA
        !BYTE	$41,$AA,$80,$AD,$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA,$41,$AA,$80,$AD
        !BYTE	$40,$AF,$B1,$B3,$B6,$B7,$B9,$AA,$41,$AA,$80,$AD,$40,$AF,$B1,$B3
        !BYTE	$B6,$B7,$B9,$00
SOUND_SHOCK:
	!BYTE	$05,$59,$08,$A5,$40,$C5,$80,$A5,$90,$40,$90,$80,$A4,$A0,$40,$B0
   	!BYTE	$A0,$80,$B5,$40,$BA,$99,$80,$90,$C0,$98,$9B,$40,$8B,$9B,$00
SOUND_MOVEOBJ:
	!BYTE	$05,$58,$00,$D0,$81,$C0,$80,$B8,$00
SOUND_MAGNET:
	!BYTE	$05,$5B,$08,$B1,$41,$B4,$40,$A3,$BA,$C7,$A6,$B4,$93,$92,$B1,$A8
	!BYTE	$C6,$A4,$9C,$BA,$BB,$BC,$C3,$A2,$B9,$B7,$95,$94,$B1,$B4,$A3,$BA
	!BYTE	$C7,$A6,$B4,$93,$92,$B1,$A8,$C6,$A4,$95,$94,$B1,$B4,$A3,$BA,$C7
	!BYTE	$94,$B4,$A3,$BA,$C7,$A6,$B4,$93,$92,$B1,$A8,$C6,$A4,$9C,$BA,$BB
 	!BYTE	$94,$B4,$A3,$CA,$C7,$A6,$B4,$93,$92,$00
SOUND_EMP:
       	!BYTE	$05,$5B,$08,$95,$41,$97,$80,$99,$9B,$9D,$40,$9F,$91,$93,$80,$95
     	!BYTE	$97,$99,$40,$9B,$9D,$9F,$80,$A1,$A2,$A3,$40,$A4,$A5,$A6,$80,$A7
      	!BYTE	$A8,$A9,$40,$AA,$AB,$AC,$80,$AD,$AE,$AF,$40,$B0,$B1,$B2,$80,$B3
     	!BYTE	$B4,$B5,$40,$B6,$B7,$B8,$80,$B9,$BA,$BB,$40,$BC,$BE,$BF,$80,$C0
     	!BYTE	$C1,$C2,$40,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$80,$CC,$CD,$CE
        !BYTE	$40,$CF,$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$80,$D8,$D9,$DA,$40,$DB
        !BYTE	$DC,$DD,$80,$DE,$DF,$00
SOUND_MEDKIT:	
        !BYTE	$05,$59,$08,$C0,$41,$C4,$40,$C7,$CC,$C4,$C7,$CC,$C4,$C7,$CC,$C4
        !BYTE	$C7,$CC,$C4,$C7,$CC,$C4,$C7,$CC,$C4,$C7,$CC,$C4,$C7,$CC,$C4,$C7
        !BYTE	$CC,$C4,$C7,$CC,$C4,$C7,$CC,$00
SOUND_EXPLOSION:
	!BYTE	$05,$5C,$00,$94,$81,$95,$80,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E
        !BYTE	$92,$80,$94,$8F,$8E,$8D,$8C,$8B,$8A,$89,$88,$87,$86,$84,$00





